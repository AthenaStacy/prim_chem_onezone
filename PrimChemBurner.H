#include "PrimChemGlobals.H"
#include <math.h>
#include "h2_opac.dat"
//#include "mol_data.h"
//#include "spline.cpp"
#define  NMD 10000
using namespace PrimChemNS;




REAL hhe_casea[501] = { 5.4757e-37, 5.7113e-37, 5.9572e-37, 6.2136e-37, 6.4811e-37, 6.7602e-37, 7.0513e-37, 7.3549e-37, 7.6717e-37, 8.0022e-37, 8.3469e-37, 8.7065e-37, 9.0816e-37, 9.473e-37, 9.8813e-37, 1.0307e-36, 1.0751e-36, 1.1215e-36, 1.17e-36, 1.2211e-36, 1.2745e-36, 1.3302e-36, 1.3884e-36, 1.449e-36, 1.5123e-36, 1.5783e-36, 1.6471e-36, 1.719e-36, 1.7939e-36, 1.8721e-36, 1.9537e-36, 2.0388e-36, 2.1276e-36, 2.2203e-36, 2.3169e-36, 2.4178e-36, 2.5235e-36, 2.6351e-36, 2.7516e-36, 2.8731e-36, 3e-36, 3.1323e-36, 3.2704e-36, 3.4145e-36, 3.5649e-36, 3.7218e-36, 3.8855e-36, 4.0564e-36, 4.2347e-36, 4.4208e-36, 4.6149e-36, 4.8176e-36, 5.029e-36, 5.2497e-36, 5.4819e-36, 5.7268e-36, 5.9823e-36, 6.2491e-36, 6.5275e-36, 6.8181e-36, 7.1214e-36, 7.4379e-36, 7.7683e-36, 8.1131e-36, 8.473e-36, 8.8486e-36, 9.2406e-36, 9.6497e-36, 1.0077e-35, 1.0522e-35, 1.0988e-35, 1.1473e-35, 1.1986e-35, 1.2526e-35, 1.309e-35, 1.3679e-35, 1.4293e-35, 1.4934e-35, 1.5604e-35, 1.6302e-35, 1.7032e-35, 1.7793e-35, 1.8587e-35, 1.9417e-35, 2.0282e-35, 2.1186e-35, 2.2129e-35, 2.3114e-35, 2.4141e-35, 2.5214e-35, 2.6354e-35, 2.7552e-35, 2.8803e-35, 3.0109e-35, 3.1473e-35, 3.2897e-35, 3.4384e-35, 3.5936e-35, 3.7557e-35, 3.9249e-35, 4.1016e-35, 4.2861e-35, 4.4787e-35, 4.6798e-35, 4.8897e-35, 5.109e-35, 5.338e-35, 5.5775e-35, 5.8345e-35, 6.1071e-35, 6.4009e-35, 6.7333e-35, 7.1494e-35, 7.7641e-35, 8.8618e-35, 1.1126e-34, 1.6151e-34, 2.7556e-34, 5.3326e-34, 1.1057e-33, 2.3474e-33, 4.9675e-33, 1.035e-32, 2.1138e-32, 4.2278e-32, 8.2828e-32, 1.591e-31, 3.0169e-31, 5.6213e-31, 1.0307e-30, 1.8636e-30, 3.3301e-30, 5.8997e-30, 1.0402e-29, 1.8345e-29, 3.2556e-29, 5.8581e-29, 1.0782e-28, 2.0493e-28, 4.057e-28, 8.4108e-28, 1.8246e-27, 4.109e-27, 9.47e-27, 2.2056e-26, 5.12e-26, 1.1734e-25, 2.6367e-25, 5.7694e-25, 1.2238e-24, 2.5087e-24, 4.9415e-24, 9.2889e-24, 1.6532e-23, 2.7629e-23, 4.3031e-23, 6.2139e-23, 8.3085e-23, 1.0319e-22, 1.1989e-22, 1.3156e-22, 1.3922e-22, 1.4067e-22, 1.3695e-22, 1.32e-22, 1.2546e-22, 1.181e-22, 1.1049e-22, 1.0301e-22, 9.5896e-23, 8.9299e-23, 8.3283e-23, 7.7861e-23, 7.2998e-23, 6.8625e-23, 6.4648e-23, 6.097e-23, 5.7509e-23, 5.4213e-23, 5.1064e-23, 4.8061e-23, 4.5207e-23, 4.2492e-23, 3.9927e-23, 3.7553e-23, 3.5376e-23, 3.3403e-23, 3.1641e-23, 3.0101e-23, 2.8798e-23, 2.7755e-23, 2.7001e-23, 2.6573e-23, 2.6519e-23, 2.6897e-23, 2.777e-23, 2.9209e-23, 3.1283e-23, 3.4032e-23, 3.7486e-23, 4.163e-23, 4.6367e-23, 5.1511e-23, 5.678e-23, 6.1816e-23, 6.6236e-23, 6.9696e-23, 7.1957e-23, 7.2928e-23, 7.2659e-23, 7.1314e-23, 6.9119e-23, 6.6312e-23, 6.3115e-23, 5.9713e-23, 5.625e-23, 5.2828e-23, 4.9516e-23, 4.6359e-23, 4.3381e-23, 4.0583e-23, 3.7979e-23, 3.5565e-23, 3.3333e-23, 3.1273e-23, 2.9373e-23, 2.7621e-23, 2.6007e-23, 2.4519e-23, 2.3147e-23, 2.1881e-23, 2.0712e-23, 1.9629e-23, 1.8627e-23, 1.77e-23, 1.6842e-23, 1.6046e-23, 1.5308e-23, 1.4622e-23, 1.3985e-23, 1.3392e-23, 1.2838e-23, 1.2321e-23, 1.1838e-23, 1.1388e-23, 1.0968e-23, 1.0575e-23, 1.0208e-23, 9.8551e-24, 9.5205e-24, 9.2074e-24, 8.9165e-24, 8.6443e-24, 8.3893e-24, 8.1504e-24, 7.9265e-24, 7.7167e-24, 7.5199e-24, 7.3354e-24, 7.1623e-24, 6.9999e-24, 6.8476e-24, 6.7047e-24, 6.5707e-24, 6.4449e-24, 6.3144e-24, 6.1892e-24, 6.0725e-24, 5.9641e-24, 5.8659e-24, 5.7748e-24, 5.6903e-24, 5.6121e-24, 5.5397e-24, 5.4729e-24, 5.4113e-24, 5.3546e-24, 5.3026e-24, 5.2549e-24, 5.2114e-24, 5.1719e-24, 5.1361e-24, 5.1038e-24, 5.0748e-24, 5.0491e-24, 5.0263e-24, 5.0078e-24, 4.9952e-24, 4.9853e-24, 4.9781e-24, 4.9734e-24, 4.971e-24, 4.9709e-24, 4.973e-24, 4.9772e-24, 4.9834e-24, 4.9915e-24, 5.0015e-24, 5.0133e-24, 5.0267e-24, 5.0418e-24, 5.0584e-24, 5.0766e-24, 5.0963e-24, 5.1199e-24, 5.1485e-24, 5.1786e-24, 5.2101e-24, 5.2431e-24, 5.2775e-24, 5.3132e-24, 5.3502e-24, 5.3885e-24, 5.428e-24, 5.4687e-24, 5.5107e-24, 5.5537e-24, 5.5979e-24, 5.6432e-24, 5.6896e-24, 5.737e-24, 5.7854e-24, 5.8394e-24, 5.898e-24, 5.9578e-24, 6.0189e-24, 6.0811e-24, 6.1445e-24, 6.209e-24, 6.2747e-24, 6.3415e-24, 6.4094e-24, 6.4784e-24, 6.5485e-24, 6.6197e-24, 6.6919e-24, 6.7652e-24, 6.8394e-24, 6.9147e-24, 6.991e-24, 7.0757e-24, 7.1646e-24, 7.2547e-24, 7.3462e-24, 7.439e-24, 7.5331e-24, 7.6285e-24, 7.7252e-24, 7.8231e-24, 7.9223e-24, 8.0227e-24, 8.1244e-24, 8.2273e-24, 8.3315e-24, 8.4369e-24, 8.5434e-24, 8.6512e-24, 8.7602e-24, 8.8816e-24, 9.0064e-24, 9.1329e-24, 9.261e-24, 9.3907e-24, 9.5221e-24, 9.655e-24, 9.7896e-24, 9.9257e-24, 1.0064e-23, 1.0203e-23, 1.0344e-23, 1.0486e-23, 1.063e-23, 1.0776e-23, 1.0923e-23, 1.1072e-23, 1.1223e-23, 1.1391e-23, 1.1562e-23, 1.1734e-23, 1.1909e-23, 1.2086e-23, 1.2265e-23, 1.2446e-23, 1.263e-23, 1.2815e-23, 1.3003e-23, 1.3193e-23, 1.3384e-23, 1.3578e-23, 1.3774e-23, 1.3973e-23, 1.4173e-23, 1.4375e-23, 1.4582e-23, 1.481e-23, 1.504e-23, 1.5273e-23, 1.5509e-23, 1.5748e-23, 1.599e-23, 1.6235e-23, 1.6482e-23, 1.6733e-23, 1.6986e-23, 1.7242e-23, 1.7501e-23, 1.7763e-23, 1.8028e-23, 1.8295e-23, 1.8566e-23, 1.8839e-23, 1.9122e-23, 1.9428e-23, 1.9738e-23, 2.0051e-23, 2.0369e-23, 2.069e-23, 2.1015e-23, 2.1344e-23, 2.1677e-23, 2.2014e-23, 2.2355e-23, 2.27e-23, 2.3048e-23, 2.3401e-23, 2.3758e-23, 2.4118e-23, 2.4482e-23, 2.4851e-23, 2.5237e-23, 2.5648e-23, 2.6064e-23, 2.6486e-23, 2.6913e-23, 2.7345e-23, 2.7783e-23, 2.8226e-23, 2.8674e-23, 2.9128e-23, 2.9587e-23, 3.0052e-23, 3.0523e-23, 3.0999e-23, 3.148e-23, 3.1967e-23, 3.246e-23, 3.2958e-23, 3.3487e-23, 3.4042e-23, 3.4604e-23, 3.5173e-23, 3.5751e-23, 3.6336e-23, 3.6929e-23, 3.753e-23, 3.8138e-23, 3.8755e-23, 3.9379e-23, 4.0011e-23, 4.0652e-23, 4.1301e-23, 4.1958e-23, 4.2623e-23, 4.3297e-23, 4.3979e-23, 4.4711e-23, 4.547e-23, 4.624e-23, 4.7021e-23, 4.7815e-23, 4.862e-23, 4.9436e-23, 5.0266e-23, 5.1107e-23, 5.1961e-23, 5.2827e-23, 5.3707e-23, 5.46e-23, 5.5506e-23, 5.6426e-23, 5.736e-23, 5.8307e-23, 5.927e-23, 6.0312e-23, 6.1382e-23, 6.2472e-23, 6.3581e-23, 6.471e-23, 6.586e-23, 6.703e-23, 6.8222e-23, 6.9436e-23, 7.0673e-23, 7.1934e-23, 7.3218e-23, 7.4527e-23, 7.5863e-23, 7.7224e-23, 7.8613e-23, 8.0031e-23, 8.1478e-23 };

//Old table (Disclaimer, noticed weird behavoir on occasion when using this table)
//REAL hhe_casea[352] = { -1.14289e-31, -1.14392e-31, -1.1449e-31, -1.14584e-31, -1.14672e-31, -1.1475e-31, -1.14816e-31, -1.14867e-31, -1.14899e-31, -1.14906e-31, -1.14882e-31, -1.1482e-31, -1.14711e-31, -1.14544e-31, -1.14305e-31, -1.13981e-31, -1.13551e-31, -1.12995e-31, -1.12286e-31, -1.11394e-31, -1.10282e-31, -1.08908e-31, -1.07222e-31, -1.05166e-31, -1.02671e-31, -9.96583e-32, -9.60214e-32, -9.16646e-32, -8.6467e-32, -8.02868e-32, -7.2961e-32, -6.43032e-32, -5.41002e-32, -4.21096e-32, -2.80557e-32, -1.16265e-32, 7.5303e-33, 2.98112e-32, 5.56614e-32, 8.5637e-32, 1.20532e-31, 1.60773e-31, 2.07068e-31, 2.60196e-31, 3.21016e-31, 3.90473e-31, 4.70102e-31, 5.61275e-31, 6.64565e-31, 7.81302e-31, 9.1292e-31, 1.06108e-30, 1.22731e-30, 1.41385e-30, 1.62209e-30, 1.84123e-30, 2.07773e-30, 2.33708e-30, 2.62077e-30, 2.93017e-30, 3.26656e-30, 3.63152e-30, 3.96792e-30, 4.45308e-30, 4.91207e-30, 5.4047e-30, 5.93223e-30, 6.49551e-30, 7.09524e-30, 7.732e-30, 8.4083e-30, 9.11706e-30, 9.86774e-30, 1.06567e-29, 1.14831e-29, 1.23508e-29, 1.32619e-29, 1.42165e-29, 1.52278e-29, 1.62629e-29, 1.72717e-29, 1.88753e-29, 2.16592e-29, 2.47799e-29, 2.82667e-29, 3.21836e-29, 3.65099e-29, 4.13085e-29, 4.66774e-29, 5.26998e-29, 5.82758e-29, 6.61605e-29, 7.61056e-29, 8.97187e-29, 1.10685e-28, 1.46875e-28, 2.1681e-28, 3.67097e-28, 7.31475e-28, 1.72004e-27, 4.67129e-27, 1.39091e-26, 4.343e-26, 1.37889e-25, 4.38395e-25, 1.34353e-24, 3.79858e-24, 9.64061e-24, 2.15415e-23, 4.15183e-23, 6.82535e-23, 9.57261e-23, 1.17267e-22, 1.28581e-22, 1.30735e-22, 1.25922e-22, 1.17357e-22, 1.07628e-22, 9.77452e-23, 8.82927e-23, 8.00365e-23, 7.28871e-23, 6.67813e-23, 6.15199e-23, 5.69467e-23, 5.26378e-23, 4.85646e-23, 4.46028e-23, 4.11295e-23, 3.78426e-23, 3.49061e-23, 3.23437e-23, 3.0304e-23, 2.85966e-23, 2.74254e-23, 2.69013e-23, 2.72528e-23, 2.85154e-23, 3.10031e-23, 3.49498e-23, 4.05971e-23, 4.78048e-23, 5.6336e-23, 6.54525e-23, 7.43014e-23, 8.12029e-23, 8.53262e-23, 8.61499e-23, 8.45913e-23, 8.06651e-23, 7.55602e-23, 6.98958e-23, 6.41393e-23, 5.85587e-23, 5.33308e-23, 4.85321e-23, 4.41881e-23, 4.02773e-23, 3.67777e-23, 3.3641e-23, 3.08491e-23, 2.83748e-23, 2.61536e-23, 2.41706e-23, 2.23986e-23, 2.08103e-23, 1.93846e-23, 1.81027e-23, 1.69483e-23, 1.5906e-23, 1.4971e-23, 1.41172e-23, 1.33429e-23, 1.26393e-23, 1.19989e-23, 1.0583e-23, 1.00591e-23, 9.58917e-24, 9.16213e-24, 8.77378e-24, 8.42046e-24, 8.09875e-24, 7.80576e-24, 7.5389e-24, 7.29583e-24, 7.0744e-24, 6.87156e-24, 6.66073e-24, 6.47041e-24, 6.29873e-24, 6.14407e-24, 6.00496e-24, 5.88007e-24, 5.7682e-24, 5.66884e-24, 5.58035e-24, 5.50193e-24, 5.43295e-24, 5.37246e-24, 5.31981e-24, 5.27441e-24, 5.23573e-24, 5.21513e-24, 5.20203e-24, 5.19485e-24, 5.19321e-24, 5.19683e-24, 5.20538e-24, 5.21853e-24, 5.23603e-24, 5.25763e-24, 5.28311e-24, 5.31227e-24, 5.34491e-24, 5.38086e-24, 5.41997e-24, 5.46207e-24, 5.50704e-24, 5.55474e-24, 5.60506e-24, 5.65787e-24, 5.71307e-24, 5.77057e-24, 5.83027e-24, 5.89209e-24, 5.95594e-24, 6.02175e-24, 6.10749e-24, 6.20131e-24, 6.29798e-24, 6.39743e-24, 6.49963e-24, 6.60453e-24, 6.71211e-24, 6.82231e-24, 6.93511e-24, 7.05048e-24, 7.16843e-24, 7.28887e-24, 7.41177e-24, 7.53709e-24, 7.6648e-24, 7.79489e-24, 7.9273e-24, 8.06202e-24, 8.199e-24, 8.33823e-24, 8.47967e-24, 8.62328e-24, 8.76905e-24, 8.91693e-24, 9.06689e-24, 9.24303e-24, 9.43665e-24, 9.63416e-24, 9.83558e-24, 1.00409e-23, 1.02502e-23, 1.04633e-23, 1.06804e-23, 1.09014e-23, 1.11263e-23, 1.13551e-23, 1.15878e-23, 1.18244e-23, 1.20649e-23, 1.23093e-23, 1.25575e-23, 1.28095e-23, 1.30654e-23, 1.33251e-23, 1.35885e-23, 1.38557e-23, 1.41266e-23, 1.44012e-23, 1.46795e-23, 1.49614e-23, 1.52771e-23, 1.56293e-23, 1.59882e-23, 1.63541e-23, 1.67269e-23, 1.71066e-23, 1.74933e-23, 1.7887e-23, 1.82877e-23, 1.86955e-23, 1.91104e-23, 1.95323e-23, 1.99613e-23, 2.03974e-23, 2.08406e-23, 2.12909e-23, 2.17483e-23, 2.22128e-23, 2.26843e-23, 2.31629e-23, 2.36485e-23, 2.41411e-23, 2.46406e-23, 2.51471e-23, 2.56606e-23, 2.62164e-23, 2.6846e-23, 2.74882e-23, 2.81432e-23, 2.88111e-23, 2.9492e-23, 3.0186e-23, 3.08932e-23, 3.16138e-23, 3.23478e-23, 3.30953e-23, 3.38565e-23, 3.46314e-23, 3.54202e-23, 3.6223e-23, 3.70398e-23, 3.78707e-23, 3.8716e-23, 3.95756e-23, 4.04497e-23, 4.13384e-23, 4.22418e-23, 4.31602e-23, 4.40936e-23, 4.50423e-23, 4.60434e-23, 4.71944e-23, 4.83717e-23, 4.95757e-23, 5.08071e-23, 5.20666e-23, 5.33547e-23, 5.46722e-23, 5.60198e-23, 5.73983e-23, 5.88085e-23, 6.02512e-23, 6.17275e-23, 6.32384e-23, 6.47848e-23, 6.63682e-23, 6.79897e-23, 6.96507e-23, 7.13528e-23, 7.30975e-23, 7.48868e-23, 7.67226e-23, 7.86071e-23, 8.05426e-23, 8.25317e-23 };

REAL hhe_caseb[501] = { 6.0879e-37, 6.3533e-37, 6.6303e-37, 6.9193e-37, 7.2211e-37, 7.536e-37, 7.8647e-37, 8.2078e-37, 8.566e-37, 8.9398e-37, 9.3299e-37, 9.7372e-37, 1.0162e-36, 1.0606e-36, 1.1069e-36, 1.1553e-36, 1.2058e-36, 1.2584e-36, 1.3136e-36, 1.3718e-36, 1.4326e-36, 1.4961e-36, 1.5623e-36, 1.6315e-36, 1.7037e-36, 1.7791e-36, 1.8579e-36, 1.9401e-36, 2.0259e-36, 2.1154e-36, 2.209e-36, 2.3066e-36, 2.4086e-36, 2.515e-36, 2.6262e-36, 2.7422e-36, 2.8639e-36, 2.9925e-36, 3.1268e-36, 3.2671e-36, 3.4135e-36, 3.5664e-36, 3.7262e-36, 3.893e-36, 4.0671e-36, 4.2491e-36, 4.4391e-36, 4.6375e-36, 4.8447e-36, 5.0612e-36, 5.2872e-36, 5.5233e-36, 5.7699e-36, 6.0275e-36, 6.2987e-36, 6.585e-36, 6.8841e-36, 7.1965e-36, 7.5228e-36, 7.8638e-36, 8.22e-36, 8.5921e-36, 8.9808e-36, 9.387e-36, 9.8113e-36, 1.0255e-35, 1.0718e-35, 1.1201e-35, 1.1707e-35, 1.2235e-35, 1.2786e-35, 1.3363e-35, 1.3972e-35, 1.4614e-35, 1.5285e-35, 1.5986e-35, 1.6719e-35, 1.7484e-35, 1.8284e-35, 1.912e-35, 1.9994e-35, 2.0907e-35, 2.1861e-35, 2.2858e-35, 2.39e-35, 2.4989e-35, 2.6127e-35, 2.7316e-35, 2.8559e-35, 2.9858e-35, 3.1239e-35, 3.2693e-35, 3.4213e-35, 3.5802e-35, 3.7463e-35, 3.92e-35, 4.1017e-35, 4.2915e-35, 4.4901e-35, 4.6976e-35, 4.9146e-35, 5.1416e-35, 5.3788e-35, 5.6269e-35, 5.8863e-35, 6.1576e-35, 6.4413e-35, 6.7384e-35, 7.0572e-35, 7.3952e-35, 7.7578e-35, 8.1627e-35, 8.6551e-35, 9.3503e-35, 1.0533e-34, 1.2889e-34, 1.8018e-34, 2.9556e-34, 5.554e-34, 1.1322e-33, 2.3833e-33, 5.0231e-33, 1.0443e-32, 2.13e-32, 4.2566e-32, 8.3353e-32, 1.6009e-31, 3.037e-31, 5.6644e-31, 1.0406e-30, 1.8871e-30, 3.3879e-30, 6.0439e-30, 1.0765e-29, 1.9258e-29, 3.4866e-29, 6.4462e-29, 1.2295e-28, 2.4437e-28, 5.0976e-28, 1.1175e-27, 2.5571e-27, 6.0246e-27, 1.4383e-26, 3.4281e-26, 8.0804e-26, 1.8674e-25, 4.2065e-25, 9.1717e-25, 1.9252e-24, 3.8712e-24, 7.3962e-24, 1.3302e-23, 2.2304e-23, 3.4573e-23, 4.9292e-23, 6.4636e-23, 7.8364e-23, 8.8681e-23, 9.479e-23, 9.687e-23, 9.5692e-23, 9.222e-23, 8.7335e-23, 8.1729e-23, 7.5897e-23, 7.0162e-23, 6.4723e-23, 5.9696e-23, 5.5134e-23, 5.105e-23, 4.7423e-23, 4.4204e-23, 4.1321e-23, 3.8695e-23, 3.6253e-23, 3.3942e-23, 3.1735e-23, 2.9624e-23, 2.7611e-23, 2.5703e-23, 2.3897e-23, 2.2181e-23, 2.0551e-23, 1.9022e-23, 1.7594e-23, 1.6279e-23, 1.5105e-23, 1.4113e-23, 1.3348e-23, 1.2846e-23, 1.2634e-23, 1.2741e-23, 1.3201e-23, 1.406e-23, 1.5369e-23, 1.7179e-23, 1.9535e-23, 2.2439e-23, 2.5855e-23, 2.968e-23, 3.3722e-23, 3.771e-23, 4.1328e-23, 4.4264e-23, 4.6286e-23, 4.7278e-23, 4.7264e-23, 4.637e-23, 4.4783e-23, 4.2711e-23, 4.0338e-23, 3.7821e-23, 3.5274e-23, 3.2779e-23, 3.0389e-23, 2.8135e-23, 2.6033e-23, 2.4087e-23, 2.2296e-23, 2.0652e-23, 1.9148e-23, 1.7775e-23, 1.6524e-23, 1.5384e-23, 1.4344e-23, 1.3398e-23, 1.2535e-23, 1.1748e-23, 1.103e-23, 1.0374e-23, 9.7756e-24, 9.2281e-24, 8.7288e-24, 8.2723e-24, 7.8544e-24, 7.4716e-24, 7.121e-24, 6.7994e-24, 6.5044e-24, 6.2337e-24, 5.9849e-24, 5.7564e-24, 5.5464e-24, 5.3535e-24, 5.1762e-24, 5.0132e-24, 4.8634e-24, 4.7244e-24, 4.5962e-24, 4.4782e-24, 4.3722e-24, 4.275e-24, 4.1859e-24, 4.1043e-24, 4.0297e-24, 3.9614e-24, 3.8992e-24, 3.8424e-24, 3.7908e-24, 3.744e-24, 3.7017e-24, 3.6635e-24, 3.6292e-24, 3.5986e-24, 3.5665e-24, 3.537e-24, 3.5111e-24, 3.4891e-24, 3.4732e-24, 3.4603e-24, 3.4504e-24, 3.4432e-24, 3.4385e-24, 3.4363e-24, 3.4365e-24, 3.4387e-24, 3.4431e-24, 3.4494e-24, 3.4576e-24, 3.4676e-24, 3.4793e-24, 3.4925e-24, 3.5073e-24, 3.5236e-24, 3.5413e-24, 3.5616e-24, 3.5865e-24, 3.6127e-24, 3.6403e-24, 3.6691e-24, 3.6991e-24, 3.7303e-24, 3.7626e-24, 3.7961e-24, 3.8305e-24, 3.866e-24, 3.9025e-24, 3.94e-24, 3.9783e-24, 4.0176e-24, 4.0577e-24, 4.0987e-24, 4.1405e-24, 4.1857e-24, 4.2352e-24, 4.2856e-24, 4.337e-24, 4.3893e-24, 4.4425e-24, 4.4965e-24, 4.5514e-24, 4.6071e-24, 4.6636e-24, 4.7209e-24, 4.779e-24, 4.8378e-24, 4.8974e-24, 4.9578e-24, 5.0189e-24, 5.0806e-24, 5.1431e-24, 5.2109e-24, 5.2829e-24, 5.3559e-24, 5.4297e-24, 5.5045e-24, 5.5802e-24, 5.6568e-24, 5.7343e-24, 5.8126e-24, 5.8919e-24, 5.9719e-24, 6.0529e-24, 6.1347e-24, 6.2173e-24, 6.3007e-24, 6.385e-24, 6.4701e-24, 6.5559e-24, 6.65e-24, 6.748e-24, 6.8472e-24, 6.9476e-24, 7.049e-24, 7.1516e-24, 7.2553e-24, 7.3601e-24, 7.466e-24, 7.573e-24, 7.6812e-24, 7.7904e-24, 7.9007e-24, 8.012e-24, 8.1245e-24, 8.238e-24, 8.3526e-24, 8.4682e-24, 8.5962e-24, 8.7274e-24, 8.8601e-24, 8.9944e-24, 9.1301e-24, 9.2674e-24, 9.4061e-24, 9.5463e-24, 9.6881e-24, 9.8313e-24, 9.976e-24, 1.0122e-23, 1.027e-23, 1.0419e-23, 1.0569e-23, 1.0722e-23, 1.0875e-23, 1.103e-23, 1.1203e-23, 1.1378e-23, 1.1555e-23, 1.1734e-23, 1.1915e-23, 1.2098e-23, 1.2283e-23, 1.2471e-23, 1.266e-23, 1.2851e-23, 1.3045e-23, 1.324e-23, 1.3438e-23, 1.3637e-23, 1.3838e-23, 1.4042e-23, 1.4247e-23, 1.4458e-23, 1.4688e-23, 1.4922e-23, 1.5158e-23, 1.5397e-23, 1.5638e-23, 1.5883e-23, 1.613e-23, 1.638e-23, 1.6633e-23, 1.6889e-23, 1.7148e-23, 1.7409e-23, 1.7673e-23, 1.794e-23, 1.821e-23, 1.8482e-23, 1.8758e-23, 1.9043e-23, 1.9351e-23, 1.9663e-23, 1.9978e-23, 2.0297e-23, 2.0621e-23, 2.0948e-23, 2.1278e-23, 2.1613e-23, 2.1952e-23, 2.2294e-23, 2.2641e-23, 2.2991e-23, 2.3345e-23, 2.3703e-23, 2.4065e-23, 2.4431e-23, 2.48e-23, 2.5188e-23, 2.56e-23, 2.6018e-23, 2.644e-23, 2.6869e-23, 2.7302e-23, 2.7741e-23, 2.8185e-23, 2.8635e-23, 2.909e-23, 2.955e-23, 3.0016e-23, 3.0487e-23, 3.0964e-23, 3.1447e-23, 3.1935e-23, 3.2428e-23, 3.2927e-23, 3.3457e-23, 3.4012e-23, 3.4575e-23, 3.5146e-23, 3.5724e-23, 3.631e-23, 3.6903e-23, 3.7505e-23, 3.8114e-23, 3.8731e-23, 3.9356e-23, 3.9989e-23, 4.0631e-23, 4.128e-23, 4.1938e-23, 4.2604e-23, 4.3278e-23, 4.3961e-23, 4.4693e-23, 4.5452e-23, 4.6223e-23, 4.7005e-23, 4.7798e-23, 4.8604e-23, 4.9421e-23, 5.0251e-23, 5.1092e-23, 5.1947e-23, 5.2814e-23, 5.3694e-23, 5.4587e-23, 5.5493e-23, 5.6414e-23, 5.7348e-23, 5.8296e-23, 5.9259e-23, 6.0301e-23, 6.1372e-23, 6.2462e-23, 6.3571e-23, 6.4701e-23, 6.585e-23, 6.7021e-23, 6.8213e-23, 6.9428e-23, 7.0665e-23, 7.1925e-23, 7.321e-23, 7.452e-23, 7.5855e-23, 7.7217e-23, 7.8606e-23, 8.0024e-23, 8.1472e-23 };

//Old table
//REAL hhe_caseb[354] = {5.35e-34, 5.69e-34, 6.04e-34, 6.43e-34, 6.83e-34, 7.26e-34, 7.72e-34, 8.21e-34, 8.73e-34, 9.27e-34, 9.86e-34, 1.05e-33, 1.11e-33, 1.18e-33, 1.26e-33, 1.34e-33, 1.42e-33, 1.52e-33, 1.6e-33, 1.7e-33, 1.81e-33, 1.92e-33, 2.05e-33, 2.17e-33, 2.31e-33, 2.45e-33, 2.61e-33, 2.78e-33, 2.96e-33, 3.15e-33, 3.36e-33, 3.57e-33, 3.8e-33, 4.05e-33, 4.31e-33, 4.58e-33, 4.87e-33, 5.19e-33, 5.52e-33, 5.87e-33, 6.25e-33, 6.65e-33, 7.07e-33, 7.52e-33, 8e-33, 8.51e-33, 9.06e-33, 9.63e-33, 1.02e-32, 1.09e-32, 1.16e-32, 1.24e-32, 1.32e-32, 1.41e-32, 1.5e-32, 1.6e-32, 1.7e-32, 1.82e-32, 1.93e-32, 2.06e-32, 2.2e-32, 2.33e-32, 2.49e-32, 2.66e-32, 2.83e-32, 3.02e-32, 3.21e-32, 3.42e-32, 3.65e-32, 3.88e-32, 4.14e-32, 4.4e-32, 4.69e-32, 4.99e-32, 5.32e-32, 5.66e-32, 6.04e-32, 6.46e-32, 6.9e-32, 7.37e-32, 7.87e-32, 8.4e-32, 8.98e-32, 9.63e-32, 1.04e-31, 1.13e-31, 1.28e-31, 1.56e-31, 2.17e-31, 3.56e-31, 6.8e-31, 1.41e-30, 3.04e-30, 6.55e-30, 1.41e-29, 3.07e-29, 7e-29, 1.72e-28, 4.72e-28, 1.44e-27, 4.81e-27, 1.66e-26, 5.67e-26, 1.88e-25, 5.89e-25, 1.72e-24, 4.61e-24, 1.11e-23, 2.31e-23, 4.11e-23, 6.16e-23, 7.88e-23, 8.87e-23, 9.09e-23, 8.76e-23, 8.12e-23, 7.36e-23, 6.59e-23, 5.88e-23, 5.27e-23, 4.74e-23, 4.31e-23, 3.96e-23, 3.64e-23, 3.35e-23, 3.07e-23, 2.8e-23, 2.54e-23, 2.3e-23, 2.06e-23, 1.83e-23, 1.61e-23, 1.4e-23, 1.24e-23, 1.17e-23, 1.19e-23, 1.3e-23, 1.5e-23, 1.83e-23, 2.3e-23, 2.93e-23, 3.69e-23, 4.55e-23, 5.39e-23, 6.09e-23, 6.53e-23, 6.67e-23, 6.54e-23, 6.21e-23, 5.75e-23, 5.25e-23, 4.73e-23, 4.25e-23, 3.8e-23, 3.4e-23, 3.04e-23, 2.73e-23, 2.45e-23, 2.2e-23, 1.99e-23, 1.81e-23, 1.64e-23, 1.5e-23, 1.37e-23, 1.26e-23, 1.16e-23, 1.07e-23, 1e-23, 9.31e-24, 8.71e-24, 8.16e-24, 7.69e-24, 7.25e-24, 6.86e-24, 6.55e-24, 6.24e-24, 5.96e-24, 5.73e-24, 5.51e-24, 5.33e-24, 5.17e-24, 5.02e-24, 4.89e-24, 4.78e-24, 4.68e-24, 4.59e-24, 4.55e-24, 4.51e-24, 4.44e-24, 4.38e-24, 4.33e-24, 4.29e-24, 4.26e-24, 4.23e-24, 4.21e-24, 4.19e-24, 4.19e-24, 4.18e-24, 4.19e-24, 4.19e-24, 4.2e-24, 4.22e-24, 4.24e-24, 4.28e-24, 4.32e-24, 4.36e-24, 4.41e-24, 4.46e-24, 4.51e-24, 4.57e-24, 4.63e-24, 4.69e-24, 4.76e-24, 4.82e-24, 4.89e-24, 4.97e-24, 5.04e-24, 5.12e-24, 5.2e-24, 5.28e-24, 5.36e-24, 5.44e-24, 5.53e-24, 5.62e-24, 5.71e-24, 5.8e-24, 5.89e-24, 5.98e-24, 6.11e-24, 6.23e-24, 6.36e-24, 6.48e-24, 6.61e-24, 6.75e-24, 6.88e-24, 7.02e-24, 7.16e-24, 7.31e-24, 7.45e-24, 7.6e-24, 7.75e-24, 7.9e-24, 8.06e-24, 8.21e-24, 8.37e-24, 8.53e-24, 8.7e-24, 8.86e-24, 9.03e-24, 9.2e-24, 9.37e-24, 9.54e-24, 9.72e-24, 9.93e-24, 1.02e-23, 1.04e-23, 1.06e-23, 1.09e-23, 1.11e-23, 1.13e-23, 1.16e-23, 1.18e-23, 1.21e-23, 1.23e-23, 1.26e-23, 1.29e-23, 1.32e-23, 1.34e-23, 1.37e-23, 1.4e-23, 1.43e-23, 1.46e-23, 1.49e-23, 1.52e-23, 1.55e-23, 1.58e-23, 1.61e-23, 1.64e-23, 1.68e-23, 1.72e-23, 1.76e-23, 1.8e-23, 1.84e-23, 1.88e-23, 1.92e-23, 1.97e-23, 2.01e-23, 2.06e-23, 2.1e-23, 2.15e-23, 2.2e-23, 2.25e-23, 2.29e-23, 2.34e-23, 2.39e-23, 2.45e-23, 2.5e-23, 2.55e-23, 2.6e-23, 2.66e-23, 2.71e-23, 2.77e-23, 2.83e-23, 2.89e-23, 2.96e-23, 3.03e-23, 3.1e-23, 3.17e-23, 3.25e-23, 3.33e-23, 3.4e-23, 3.48e-23, 3.56e-23, 3.65e-23, 3.73e-23, 3.81e-23, 3.9e-23, 3.99e-23, 4.08e-23, 4.17e-23, 4.26e-23, 4.36e-23, 4.45e-23, 4.55e-23, 4.65e-23, 4.75e-23, 4.85e-23, 4.96e-23, 5.07e-23, 5.19e-23, 5.32e-23, 5.45e-23, 5.59e-23, 5.73e-23, 5.87e-23, 6.01e-23, 6.16e-23, 6.31e-23, 6.47e-23, 6.62e-23, 6.79e-23, 6.95e-23, 7.12e-23, 7.29e-23, 7.47e-23, 7.65e-23, 7.84e-23, 8.03e-23, 8.22e-23, 8.42e-23, 8.63e-23, 8.84e-23, 9.06e-23, 9.28e-23 };

REAL metal_cool[501] = { 1.31689999945e-27, 1.35469999943e-27, 1.3937999994e-27, 1.43409999938e-27, 1.47569999935e-27, 1.51879999932e-27, 1.56339999929e-27, 1.60949999926e-27, 1.65739999923e-27, 1.7068999992e-27, 1.75819999917e-27, 1.81149999913e-27, 1.86669999909e-27, 1.92399999905e-27, 1.98669999901e-27, 2.05779999897e-27, 2.13149999892e-27, 2.20799999888e-27, 2.28729999883e-27, 2.36949999878e-27, 2.45639999873e-27, 2.54719999867e-27, 2.64109999861e-27, 2.73829999855e-27, 2.83869999849e-27, 2.94259999842e-27, 3.04979999835e-27, 3.16059999828e-27, 3.27309999821e-27, 3.38729999813e-27, 3.50489999805e-27, 3.62579999796e-27, 3.75009999787e-27, 3.87789999778e-27, 4.00909999768e-27, 4.14379999758e-27, 4.28209999748e-27, 4.42389999736e-27, 4.56919999725e-27, 4.71789999713e-27, 4.869499997e-27, 5.02449999687e-27, 5.18299999673e-27, 5.34499999659e-27, 5.51039999644e-27, 5.67919999628e-27, 5.85139999611e-27, 6.02709999594e-27, 6.20609999577e-27, 6.38849999558e-27, 6.57429999539e-27, 6.76349999518e-27, 6.95589999497e-27, 7.15169999475e-27, 7.35069999452e-27, 7.55299999427e-27, 7.75849999402e-27, 7.96719999375e-27, 8.17909999347e-27, 8.39409999318e-27, 8.61219999288e-27, 8.83349999256e-27, 9.05779999223e-27, 9.28519999189e-27, 9.51559999153e-27, 9.74899999115e-27, 9.98549999076e-27, 1.02249999904e-26, 1.04669999899e-26, 1.07129999895e-26, 1.0960999989e-26, 1.12119999885e-26, 1.1465999988e-26, 1.17229999875e-26, 1.19829999869e-26, 1.22459999863e-26, 1.25119999857e-26, 1.27799999851e-26, 1.30519999844e-26, 1.33259999837e-26, 1.3603999983e-26, 1.38839999822e-26, 1.41679999814e-26, 1.44539999806e-26, 1.47429999797e-26, 1.50359999788e-26, 1.53309999779e-26, 1.56299999769e-26, 1.59309999759e-26, 1.62359999748e-26, 1.65439999736e-26, 1.68549999724e-26, 1.71699999712e-26, 1.74879999699e-26, 1.78089999685e-26, 1.81339999671e-26, 1.84629999656e-26, 1.87949999641e-26, 1.91309999624e-26, 1.94709999608e-26, 1.9813999959e-26, 2.01609999571e-26, 2.05129999552e-26, 2.08679999532e-26, 2.12269999511e-26, 2.15909999489e-26, 2.19499999466e-26, 2.23039999442e-26, 2.26619999417e-26, 2.30239999389e-26, 2.3390999936e-26, 2.37619999327e-26, 2.41379999285e-26, 2.45179999224e-26, 2.49039999114e-26, 2.52929998887e-26, 2.56879998385e-26, 2.60859997244e-26, 2.64869994667e-26, 2.68899988943e-26, 2.72909976526e-26, 2.76869950325e-26, 2.807098965e-26, 2.8436978862e-26, 2.8773957722e-26, 2.9069917172e-26, 2.93128409e-26, 2.948769831e-26, 2.958143787e-26, 2.95849693e-26, 2.94951364e-26, 2.93176699e-26, 2.90691003e-26, 2.8784598e-26, 2.8535655e-26, 2.8495444e-26, 2.8870419e-26, 2.956318e-26, 3.050007e-26, 3.21803e-26, 3.361092e-26, 3.69054e-26, 3.9701e-26, 4.4602e-26, 5.4405e-26, 7.378e-26, 1.1016e-25, 1.7519e-25, 2.8738e-25, 4.757e-25, 7.829e-25, 1.2687e-24, 2.0101e-24, 3.096e-24, 4.603e-24, 6.567e-24, 8.939e-24, 1.1568e-23, 1.422e-23, 1.665e-23, 1.869e-23, 1.891e-23, 2.014e-23, 2.255e-23, 2.35e-23, 2.447e-23, 2.557e-23, 2.684e-23, 2.829e-23, 2.9954e-23, 3.1831e-23, 3.3947e-23, 3.6299e-23, 3.8912e-23, 4.1795e-23, 4.4932e-23, 4.833e-23, 5.1981e-23, 5.5897e-23, 6.0066e-23, 6.4519e-23, 6.9283e-23, 7.4378e-23, 7.9833e-23, 8.5657e-23, 9.1864e-23, 9.8487e-23, 1.05599e-22, 1.13209e-22, 1.21342e-22, 1.30055e-22, 1.39389e-22, 1.49377e-22, 1.60041e-22, 1.71413e-22, 1.8352e-22, 1.96371e-22, 2.09997e-22, 2.24408e-22, 2.39594e-22, 2.5555e-22, 2.72283e-22, 2.89709e-22, 3.0773e-22, 3.26144e-22, 3.44714e-22, 3.63114e-22, 3.81023e-22, 3.98112e-22, 4.14121e-22, 4.28836e-22, 4.42041e-22, 4.53498e-22, 4.62815e-22, 4.69497e-22, 4.7303e-22, 4.73102e-22, 4.69844e-22, 4.63881e-22, 4.56319e-22, 4.48437e-22, 4.41411e-22, 4.36075e-22, 4.32897e-22, 4.31987e-22, 4.33177e-22, 4.36159e-22, 4.40513e-22, 4.45771e-22, 4.51453e-22, 4.57129e-22, 4.62448e-22, 4.67221e-22, 4.71473e-22, 4.7541e-22, 4.79298e-22, 4.83384e-22, 4.87722e-22, 4.92168e-22, 4.96315e-22, 4.99558e-22, 5.01072e-22, 4.99849e-22, 4.94812e-22, 4.84932e-22, 4.69482e-22, 4.48345e-22, 4.22162e-22, 3.923949e-22, 3.610295e-22, 3.301326e-22, 3.014235e-22, 2.760357e-22, 2.544907e-22, 2.367996e-22, 2.226835e-22, 2.116933e-22, 2.032901e-22, 1.969946e-22, 1.923277e-22, 1.888801e-22, 1.863024e-22, 1.842853e-22, 1.825893e-22, 1.809551e-22, 1.791856e-22, 1.771108e-22, 1.746175e-22, 1.716859e-22, 1.683941e-22, 1.648952e-22, 1.614397e-22, 1.582479e-22, 1.555103e-22, 1.533471e-22, 1.517687e-22, 1.507154e-22, 1.500974e-22, 1.497751e-22, 1.496286e-22, 1.495381e-22, 1.493739e-22, 1.490662e-22, 1.485052e-22, 1.476309e-22, 1.464137e-22, 1.448322e-22, 1.429748e-22, 1.408947e-22, 1.387119e-22, 1.364966e-22, 1.34319e-22, 1.321991e-22, 1.30147e-22, 1.281428e-22, 1.261466e-22, 1.240985e-22, 1.219385e-22, 1.196067e-22, 1.170033e-22, 1.140382e-22, 1.106316e-22, 1.067334e-22, 1.023337e-22, 9.74901e-23, 9.23205e-23, 8.69854e-23, 8.16669e-23, 7.65269e-23, 7.16895e-23, 6.72258e-23, 6.31618e-23, 5.94825e-23, 5.6152e-23, 5.31173e-23, 5.03253e-23, 4.77323e-23, 4.53041e-23, 4.30268e-23, 4.08994e-23, 3.8933e-23, 3.71396e-23, 3.55286e-23, 3.41e-23, 3.28462e-23, 3.17551e-23, 3.08119e-23, 3.00045e-23, 2.9318e-23, 2.87323e-23, 2.82355e-23, 2.78176e-23, 2.74696e-23, 2.71815e-23, 2.69453e-23, 2.67551e-23, 2.66028e-23, 2.64796e-23, 2.63823e-23, 2.6307e-23, 2.62503e-23, 2.62114e-23, 2.61853e-23, 2.61708e-23, 2.6163e-23, 2.61589e-23, 2.61535e-23, 2.61438e-23, 2.61269e-23, 2.60937e-23, 2.60423e-23, 2.59706e-23, 2.58747e-23, 2.57485e-23, 2.55901e-23, 2.53916e-23, 2.51488e-23, 2.48538e-23, 2.45014e-23, 2.40816e-23, 2.35891e-23, 2.3019e-23, 2.23703e-23, 2.16429e-23, 2.0848e-23, 1.99994e-23, 1.91123e-23, 1.8208e-23, 1.7307e-23, 1.6424e-23, 1.5575e-23, 1.4768e-23, 1.4012e-23, 1.3311e-23, 1.2663e-23, 1.2068e-23, 1.1529e-23, 1.1038e-23, 1.0593e-23, 1.0188e-23, 9.821e-24, 9.488e-24, 9.187e-24, 8.914e-24, 8.667e-24, 8.443e-24, 8.241e-24, 8.06e-24, 7.896e-24, 7.75e-24, 7.619e-24, 7.504e-24, 7.402e-24, 7.312e-24, 7.235e-24, 7.171e-24, 7.116e-24, 7.07e-24, 7.033e-24, 7.004e-24, 6.982e-24, 6.967e-24, 6.957e-24, 6.954e-24, 6.955e-24, 6.96e-24, 6.969e-24, 6.981e-24, 6.996e-24, 7.013e-24, 7.032e-24, 7.054e-24, 7.08e-24, 7.106e-24, 7.133e-24, 7.159e-24, 7.185e-24, 7.21e-24, 7.234e-24, 7.256e-24, 7.277e-24, 7.296e-24, 7.313e-24, 7.327e-24, 7.338e-24, 7.347e-24, 7.355e-24, 7.361e-24, 7.364e-24, 7.37e-24, 7.377e-24, 7.383e-24, 7.388e-24, 7.393e-24, 7.398e-24, 7.402e-24, 7.407e-24, 7.413e-24, 7.419e-24, 7.426e-24, 7.434e-24, 7.442e-24, 7.452e-24, 7.464e-24, 7.477e-24, 7.491e-24, 7.507e-24, 7.529e-24, 7.557e-24, 7.587e-24, 7.62e-24, 7.654e-24, 7.691e-24, 7.73e-24, 7.771e-24, 7.815e-24, 7.86e-24, 7.909e-24, 7.96e-24, 8.012e-24, 8.067e-24, 8.124e-24, 8.183e-24, 8.245e-24, 8.309e-24, 8.381e-24, 8.459e-24, 8.54e-24, 8.624e-24, 8.708e-24, 8.796e-24, 8.887e-24, 8.979e-24, 9.074e-24, 9.172e-24, 9.272e-24, 9.373e-24, 9.477e-24, 9.583e-24, 9.692e-24, 9.802e-24, 9.916e-24, 1.0031e-23, 1.0159e-23, 1.0293e-23, 1.0429e-23, 1.0567e-23, 1.0709e-23, 1.0852e-23, 1.0999e-23, 1.1149e-23, 1.1301e-23, 1.1456e-23, 1.1613e-23, 1.1774e-23, 1.1938e-23, 1.2104e-23, 1.2274e-23, 1.2447e-23, 1.2622e-23, 1.2801e-23 };

//Old table
//REAL metal_cool[352] = {1.24679e-27, 1.29944e-27, 1.35437e-27, 1.41181e-27, 1.47186e-27, 1.53468e-27, 1.60042e-27, 1.66922e-27, 1.74121e-27, 1.81656e-27, 1.90013e-27, 1.9951e-27, 2.09442e-27, 2.19821e-27, 2.30796e-27, 2.42433e-27, 2.5455e-27, 2.67156e-27, 2.80259e-27, 2.93866e-27, 3.07642e-27, 3.21713e-27, 3.36229e-27, 3.51191e-27, 3.66599e-27, 3.82438e-27, 3.98757e-27, 4.15507e-27, 4.32584e-27, 4.50102e-27, 4.68014e-27, 4.8631e-27, 5.05079e-27, 5.24171e-27, 5.43768e-27, 5.6367e-27, 5.84089e-27, 6.04862e-27, 6.26041e-27, 6.47625e-27, 6.69617e-27, 6.92018e-27, 7.14831e-27, 7.38056e-27, 7.61699e-27, 7.85764e-27, 8.10256e-27, 8.35183e-27, 8.60465e-27, 8.86336e-27, 9.12583e-27, 9.39358e-27, 9.66556e-27, 9.94286e-27, 1.0225e-26, 1.05127e-26, 1.08058e-26, 1.11045e-26, 1.14091e-26, 1.17198e-26, 1.20368e-26, 1.23606e-26, 1.26913e-26, 1.30294e-26, 1.33752e-26, 1.37288e-26, 1.40924e-26, 1.44662e-26, 1.48502e-26, 1.52449e-26, 1.56511e-26, 1.60703e-26, 1.65016e-26, 1.69468e-26, 1.74068e-26, 1.78647e-26, 1.83328e-26, 1.88186e-26, 1.9323e-26, 1.98468e-26, 2.03891e-26, 2.09514e-26, 2.15332e-26, 2.21366e-26, 2.27534e-26, 2.33831e-26, 2.40226e-26, 2.46638e-26, 2.53307e-26, 2.59657e-26, 2.6586e-26, 2.72238e-26, 2.78907e-26, 2.86266e-26, 2.94845e-26, 3.05721e-26, 3.19656e-26, 3.37952e-26, 3.59276e-26, 3.82688e-26, 4.13292e-26, 4.76963e-26, 6.44492e-26, 1.06057e-25, 2.06292e-25, 4.34481e-25, 9.13245e-25, 1.79678e-24, 3.35773e-24, 5.75514e-24, 8.96031e-24, 1.25608e-23, 1.60363e-23, 1.88792e-23, 2.11554e-23, 2.30059e-23, 2.48384e-23, 2.67511e-23, 2.89667e-23, 3.14352e-23, 3.43223e-23, 3.76412e-23, 4.14465e-23, 4.57933e-23, 5.07154e-23, 5.62215e-23, 6.23185e-23, 6.90267e-23, 7.62057e-23, 8.41739e-23, 9.28864e-23, 1.02324e-22, 1.12563e-22, 1.23582e-22, 1.35429e-22, 1.48142e-22, 1.61749e-22, 1.7626e-22, 1.9171e-22, 2.0813e-22, 2.25536e-22, 2.43894e-22, 2.63194e-22, 2.84159e-22, 3.05324e-22, 3.26507e-22, 3.47387e-22, 3.67815e-22, 3.87794e-22, 4.06198e-22, 4.23638e-22, 4.38317e-22, 4.48458e-22, 4.53077e-22, 4.52836e-22, 4.50024e-22, 4.47489e-22, 4.47428e-22, 4.50781e-22, 4.57363e-22, 4.6595e-22, 4.75742e-22, 4.84765e-22, 4.92235e-22, 4.98236e-22, 5.02878e-22, 5.07417e-22, 5.1233e-22, 5.17255e-22, 5.19771e-22, 5.1708e-22, 5.05433e-22, 4.81598e-22, 4.45135e-22, 3.98973e-22, 3.50082e-22, 3.05257e-22, 2.68707e-22, 2.41161e-22, 2.21745e-22, 2.08726e-22, 2.00406e-22, 1.95322e-22, 1.92244e-22, 1.90399e-22, 1.88943e-22, 1.87218e-22, 1.84641e-22, 1.80964e-22, 1.75865e-22, 1.70051e-22, 1.64221e-22, 1.59319e-22, 1.5587e-22, 1.53865e-22, 1.53381e-22, 1.53979e-22, 1.55146e-22, 1.56456e-22, 1.57488e-22, 1.58021e-22, 1.57683e-22, 1.56474e-22, 1.54503e-22, 1.51911e-22, 1.48839e-22, 1.45367e-22, 1.41507e-22, 1.37199e-22, 1.32419e-22, 1.26911e-22, 1.20645e-22, 1.13584e-22, 1.05828e-22, 9.76145e-23, 8.92838e-23, 8.12146e-23, 7.37557e-23, 6.70159e-23, 6.10923e-23, 5.59344e-23, 5.14215e-23, 4.74138e-23, 4.37822e-23, 4.0444e-23, 3.73879e-23, 3.45783e-23, 3.20595e-23, 2.98458e-23, 2.79352e-23, 2.63111e-23, 2.49499e-23, 2.38254e-23, 2.29116e-23, 2.21824e-23, 2.16145e-23, 2.11836e-23, 2.08679e-23, 2.06494e-23, 2.05157e-23, 2.04573e-23, 2.04663e-23, 2.05463e-23, 2.06596e-23, 2.0801e-23, 2.09532e-23, 2.10899e-23, 2.11966e-23, 2.12577e-23, 2.1256e-23, 2.11759e-23, 2.10042e-23, 2.07318e-23, 2.03502e-23, 1.98536e-23, 1.92408e-23, 1.85121e-23, 1.76808e-23, 1.67627e-23, 1.57803e-23, 1.4761e-23, 1.3735e-23, 1.27312e-23, 1.17746e-23, 1.08816e-23, 1.00654e-23, 9.34344e-24, 8.69193e-24, 8.11656e-24, 7.61094e-24, 7.16705e-24, 6.77623e-24, 6.43389e-24, 6.1338e-24, 5.87049e-24, 5.63923e-24, 5.43511e-24, 5.25718e-24, 5.10385e-24, 4.96974e-24, 4.85271e-24, 4.7508e-24, 4.66229e-24, 4.58598e-24, 4.52072e-24, 4.46542e-24, 4.419e-24, 4.38074e-24, 4.34994e-24, 4.32611e-24, 4.30851e-24, 4.29658e-24, 4.2898e-24, 4.28763e-24, 4.28961e-24, 4.29525e-24, 4.30421e-24, 4.31543e-24, 4.32741e-24, 4.34096e-24, 4.35588e-24, 4.37128e-24, 4.39089e-24, 4.41765e-24, 4.44506e-24, 4.47227e-24, 4.50016e-24, 4.52826e-24, 4.55666e-24, 4.58513e-24, 4.61392e-24, 4.64309e-24, 4.67283e-24, 4.70309e-24, 4.73408e-24, 4.76592e-24, 4.79881e-24, 4.83271e-24, 4.8678e-24, 4.90422e-24, 4.94209e-24, 4.98135e-24, 5.02213e-24, 5.06449e-24, 5.10851e-24, 5.15413e-24, 5.20142e-24, 5.25443e-24, 5.32361e-24, 5.39532e-24, 5.4696e-24, 5.54646e-24, 5.62595e-24, 5.708e-24, 5.79265e-24, 5.87989e-24, 5.96921e-24, 6.06147e-24, 6.15624e-24, 6.25346e-24, 6.35335e-24, 6.4557e-24, 6.56052e-24, 6.6678e-24, 6.77755e-24, 6.88974e-24, 7.00436e-24, 7.12143e-24, 7.24094e-24, 7.36289e-24, 7.4873e-24, 7.61417e-24 };




void GetNetworkRates(const REAL Temp, const REAL Den,REAL* ys, REAL* aion, REAL* RatRaw, int chem_cc_case,REAL* RadParams)
{
    int i;
    
    double lt1,lt2,lt3,lt4,lt5,lt6,lt7,lt8,lt9;
    double  lnt1,lnt2,lnt3,lnt4,lnt5,lnt6,lnt7,lnt8,lnt9;
    double  te,term,na,t3,naterm, capk, narate;
    double  ncrh, ncrh2, ncrhe, nt, ncr;
    double  ncr2, nv2, nlte2;
    double  nhh;
    double  xh,xh2,xhe,nlte,nv;
    
    
    // Radiation parameters
    double j21 = RadParams[0];
    double fssh2 = RadParams[1];
    double fsshd = RadParams[2];
    
    for(i=0;i<NREACTION;i++) RatRaw[i] = 0.0;
    
    lt1 = log10(Temp);
    lt2 = pow(log10(Temp),2);
    lt3 = pow(log10(Temp),3);
    lt4 = pow(log10(Temp),4);
    lt5 = pow(log10(Temp),5);
    lt6 = pow(log10(Temp),6);
    lt7 = pow(log10(Temp),7);
    lt8 = pow(log10(Temp),8);
    lt9 = pow(log10(Temp),9);
    
    te  = Temp*0.00008617;
    t3  = Temp/300.0;
    
    lnt1 = log(te);
    lnt2 = pow(log(te),2);
    lnt3 = pow(log(te),3);
    lnt4 = pow(log(te),4);
    lnt5 = pow(log(te),5);
    lnt6 = pow(log(te),6);
    lnt7 = pow(log(te),7);
    lnt8 = pow(log(te),8);
    lnt9 = pow(log(te),9);
    
    na = 6.02213e23; //Avo's number
    naterm = na*Den;
    narate = na*Den;
    ncrh  = 3.0-0.416*log10(Temp/10000.0)-0.327*pow((log10(Temp/10000.0)),2);
    ncrh  = pow(10.0,ncrh);
    ncrh2 = 4.845-1.3*log10(Temp/10000.0)+1.62*pow((log10(Temp/10000.0)),2);
    ncrh2 = pow(10.0,ncrh2);
    ncrhe = 5.0792*(1.0-1.23e-5*(Temp-2000.0));
    ncrhe = pow(10.0,ncrhe);
    ncr = 0.0; //FIX LATER
    nt  = 0.0; //FIX LATER
    
    nt = (ys[iHP]+ys[iH]+ys[iHM]+2.0*ys[iH2]+2.0*ys[iH2P]+ys[iHDP]+ys[iHD])*naterm;
    xh  = ys[iH]*aion[iH];
    xh2 = 2.0*ys[iH2]*aion[iH2];
    xhe = ys[iHE]*aion[iHE];
    
    
    //ncr = (1.0/(1.0+xhe))*(xh/ncrh+2.0*xh2/ncrh2+xhe/ncrhe);
    //ncr = 1.0/ncr;
    ncr = 0.0;
    ncr = xh/(ncrh) + xh2/ncrh2 + xhe/ncrhe;
    ncr = 1.0/ncr;
    
    
    ncr2 = ncr*100.0;
    
    
    nlte = (nt/ncr)/(1.0+(nt/ncr));
    nv   = 1.0/(1.0+(nt/ncr));
    
    nlte2 = (nt/ncr2)/(1.0+(nt/ncr2));
    nv2 = 1.0/(1.0+(nt/ncr2));
    
    capk = 1.05e-22*pow(Temp,-0.515)*exp(52000.0/Temp);
    
    
    
    // Loads rates for specific reactions
    term = 0.0;
    
    //R001: H + e --> HM + gam
    if(Temp > 6000.0)
        term = pow(10,(-16.4199 + 0.1998*lt2 - 0.005447*lt4 + 0.000040415*lt6));
    else
        term = pow(10,(-17.8450 + 0.762*lt1 + 0.1523*lt2 - 0.03274*lt3));
    RatRaw[iR001]  = term * narate;
    
    //R002: H + HM --> H2 + e
    term = 1.3e-9;   //*t3,(-0.1)
    RatRaw[iR002]  = term * narate;
           
    //R003: H + HP --> H2P + gam
    term = pow(10,(-19.38 - 1.523*lt1 + 1.118*lt2 - 0.1269*lt3));
    RatRaw[iR003]  = term * narate;
    
    //R004: H + H2P --> H2 + HP
    term = 6.4e-10;
    RatRaw[iR004]  = term * narate;
           
    //R005: HP + HM --> H + H
    term = 2.4e-6*pow(Temp,(-0.5))*(1.0+5.0e-5*Temp);
    RatRaw[iR005]  = term * narate;
    
    
    
    //R006 : H2P + e --> H + H
    if(Temp > 617.0) term = 1.32e-6*pow(Temp,(-0.76));
    else term = 1.0e-8;
    RatRaw[iR006]  = term * narate;
    

    //R007: H2 + HP --> H + H2P
    if(Temp < 110.0)
        term = 0.0e0;
    else if(Temp > 3.0e4)
        term = (-3.3232183e-7 + 3.3735382e-7*log(3.0e4) - 1.4491368e-7*pow(log(3.0e4),2) + 3.4172805e-8*pow(log(3.0e4),3)- 4.7813720e-9*pow(log(3.0e4),4) + 3.9731542e-10*pow(log(3.0e4),5) -1.8171411e-11*pow(log(3.0e4),6) + 3.5311932e-13*pow(log(3.0e4),7))*exp(-21237.15/3.0e4);
    else
        term = (-3.3232183e-7 + 3.3735382e-7*log(Temp) - 1.4491368e-7*pow(log(Temp),2) + 3.4172805e-8*pow(log(Temp),3)- 4.7813720e-9*pow(log(Temp),4) + 3.9731542e-10*pow(log(Temp),5) -1.8171411e-11*pow(log(Temp),6) + 3.5311932e-13*pow(log(Temp),7))*exp(-21237.15/Temp);
                //    term = 2.4e-9*exp(-21200.0/Temp)
                //   term = exp(-24.2491469 + 3.4008244*lnt1 - 3.8980040*lnt2 + 2.0455878*lnt3 - 5.4161829*lnt4 &
                //           +8.4107750*lnt5 - 7.8790262*lnt6 + 4.1383984*lnt7 - 9.3634588*lnt8)
    RatRaw[iR007]  = term * narate;
                

    //R008: H2 + e --> H + H + e
    term = nv*log10(4.49e-9*pow(Temp,(0.11))*exp(-101858.0/Temp));
    term = term + nlte*log10(1.91e-9*pow(Temp,(0.136))*exp(-53407.1/Temp));
    term = pow(10,(term));
    //    term = 4.49e-9*Temp,(0.11)*exp(-101858.0/Temp)
    RatRaw[iR008]  = term * narate;
    
    //R009: H2 + H --> H + H + H
    term = nv*log10(6.67e-12*sqrt(Temp)*exp(-(1.0+63593.0/Temp)));
    term = term + nlte*log10(3.52e-9*exp(-43900.0/Temp)) ; //Simon's Rate
    term = pow(10,(term));
    //term = 6.67e-12*Temp,(0.5)*exp(-(1.0+63593.0/Temp))
    RatRaw[iR009]  = term * narate;
    
    //R010: H2 + H2 --> H + H + H2
    term = (5.996e-30*pow(Temp,(4.1881))/pow((1.0+6.761e-6*Temp),(5.6881)))*exp(-54657.4/Temp);
    term = nv*log10(term);
    term = term + nlte*log10(1.3e-9*exp(-53300.0/Temp)); //Simon's Rate
    term = pow(10,(term));
    RatRaw[iR010]  = term * narate;
    
    //R011: H2 + He --> H + H + He
    term = nv*(-27.029+3.801*lt1-29487.0/Temp);
    term = term + nlte*(-2.729-1.75*lt1-23474.0/Temp);
    //6.6e-10*Temp,(0.115)*exp(-52000.0/Temp))
    term = pow(10,(term));
    //   term = 10,(-27.029+3.801*lt1-29487.0/Temp);
    RatRaw[iR011]  = term * narate;
    
    // R012: H + e --> HP + e + e
    if(Temp < 2800.0)
        term = 0.0e0;
    else
        term = exp(-3.271396786e1 + 1.35365560e1*lnt1 - 5.73932875e0*lnt2 +1.56315498e0*lnt3 - 2.87705600e-1*lnt4 + 3.48255977e-2*lnt5 -2.63197617e-3*lnt6 + 1.11954395e-4*lnt7 -2.03914985e-6*lnt8);
    RatRaw[iR012]  = term * naterm;
    
    //R013: HP + e --> H + gamma
    if(chem_cc_case == 0)
        term = 1.269e-13*pow((315614.0/Temp),(1.503))*pow((1.0+pow((604625.0/Temp),(0.470))),(-1.923)); // Trying case A
    else if (chem_cc_case == 1)
        term = 2.753e-14*pow((315614.0/Temp),(1.500))*pow((1.0+pow((115188.0/Temp),(0.407))),(-2.242));  // This is case B
    else
        term = 2.753e-14*pow((315614.0/Temp),(1.500))*pow((1.0+pow((115188.0/Temp),(0.407))),(-2.242));  // This is case B
                                                          
    RatRaw[iR013]  = term * narate;
   
    //R014: HM + e --> H + e + e
    if(Temp < 100.0)
        term = 0.0e0;
    else
        term =exp(-1.801849334e1 + 2.36085220*lnt1  -2.82744300e-1*lnt2 + 1.62331664e-2*lnt3  -3.36501203e-2*lnt4 + 1.17832978e-2*lnt5 - 1.65619470e-3*lnt6   +1.06827520e-4*lnt7 - 2.63128581e-6*lnt8);
    RatRaw[iR014]  = term * narate;
   
    //R015: HM + H --> H + H + e
    if(te > 0.1)
        term = exp(-2.0372609e1 + 1.13944933e0*lnt1 - 1.4210135e-1*lnt2
                   +8.4644554e-3*lnt3 - 1.4327641e-3*lnt4 + 2.0122503e-4*lnt5
                   +8.6639632e-5*lnt6 - 2.5850097e-5*lnt7 + 2.4555012e-6*lnt8
                   -8.0683825e-8*lnt9);
    else
        term = 2.5634e-9*pow(te,(1.78186));
    RatRaw[iR015]  = term * narate;
    
    //R016: HP + HM --> H2P + e
    if(Temp > 8000.0)
        term = 9.6e-7*pow((Temp),(-0.90));
    else
        term = 6.9e-9*pow((Temp),(-0.35));
    RatRaw[iR016]  = term * narate;
    
    // R017: He + e --> HE+ + e + e
    if(Temp < 2800.0)
        term = 0.0e0;
    else
        term = exp(-4.409864886e1 + 2.391596563e1*lnt1 - 1.07532302e1*lnt2
                   +3.05803875e0*lnt3 - 5.68511890e-1*lnt4 + 6.79539123e-2*lnt5
                   -5.00905610e-3*lnt6 + 2.06723616e-4*lnt7 - 3.64916141e-6*lnt8);
    RatRaw[iR017]  = term * naterm;
    
    // R018: HEP + e --> HEPP + e + e
    if(Temp < 5500.0)
        term = 0.0e0;
    else
        term = exp(-6.87104099e1 + 4.393347633e1*lnt1 - 1.84806699e1*lnt2
                   +4.70162649e0*lnt3 - 7.6924663e-1*lnt4 + 8.113042e-2*lnt5
                   -5.32402063e-3*lnt6 + 1.97570531e-4*lnt7 - 3.16558106e-6*lnt8);
    
    RatRaw[iR018] = term * naterm;
    
    
    //R019: Hep + e --> He + gamma
    term = 0.32*(1.0e-11*pow((Temp),(-0.5))*(11.19 - 1.676*lt1 - 0.2852*lt2 + 0.04433*lt3)); // This is case B
    term = term + 0.68*(1.0e-11*pow((Temp),(-0.5))*(12.72 - 1.615*lt1 - 0.3162*lt2 + 0.0493*lt3)); // This is case A,
    term = term + 1.9e-3*pow(Temp,(-1.50))*exp(-473421.0/Temp)*(1.0+0.3*exp(-94684.0/Temp));
    //term = term + pow(Temp,(-1.5))*(5.966e-4*exp(-455600.0/Temp)+1.613e-4*exp(-555200.0/Temp)-2.223e-5*exp(-898200/Temp));
    RatRaw[iR019] = term * narate;

     //R020: Hepp + e --> Hep + gam
     if(chem_cc_case == 0 )
         term = 2.538e-13*pow((1262456.0/Temp),1.503)*pow((1.0+pow((2418500.0/Temp),0.407)),(-1.923)); // CASE A
     else if (chem_cc_case == 1)
         term = 5.506e-14*pow((1262456.0/Temp),1.500)*pow((1.0+pow((460752.0/Temp),0.407)),(-2.242)); // CASE B
     else
         term = 5.506e-14*pow((1262456.0/Temp),1.500)*pow((1.0+pow((460752.0/Temp),0.407)),(-2.242)); // CASE B
     
     RatRaw[iR020] = term * narate;
    
    
   
     //R021: H2P + HM --> H2 + H
     term = 1.4e-7*pow(t3,(-0.5));
     RatRaw[iR021] = term * narate;
     
     //R022: H2P + HM --> H + H + H
     term = 1.4e-7*pow(t3,(-0.5));
     RatRaw[iR022] = term * narate;
     
     //R023: H2 + e --> H + HM
     if(Temp < 500.0)
         term = 0.0e0;
     else
         term = 2.7e-8*pow(Temp,(-1.27))*exp(-43000.0/Temp);
     RatRaw[iR023] = term * narate;
     
     //R024: H2 + HeP --> He + H + HP
     term = 3.7e-14*exp(35.0/Temp);
     RatRaw[iR024] = term * narate;
     
     //R025: H2 + HeP --> HE + H2P
     term = 7.2e-15;
     RatRaw[iR025] = term * narate;
     
     //R026: H + HEP --> HE + HP + GAM
     term = 1.2e-15*pow(t3,(0.25));
     RatRaw[iR026] = term * narate;
     
     //R027: He + HP --> H + HeP
     if(Temp > 10000.0)
         term = 4.0e-37*pow(Temp,(4.74));
     else if(Temp < 1500.0)
         term = 0.0e0;
     else
         term = 1.26e-9*pow(Temp,(-0.75))*exp(-127500.0/Temp);
     
     RatRaw[iR027] = term * narate;
    
     //R028: HeP + HM --> He + H
     term = 2.32e-7*pow(t3,(-0.52))*exp(Temp/22400.0);
     RatRaw[iR028] = term * narate;
     
     //R029: HM + He --> H + He + e
     if(Temp < 250.0)
         term = 0.0e0;
     else
         term = 4.1e-17*pow(Temp,2.0)*exp(-19870.0/Temp);
     
    RatRaw[iR029] = term * narate;
    
     //R030: H + H + H --> H2 + H
     //  term = 1.44e-26*pow(Temp,(-1.54));  //7.7e-31*Temp,(-0.464)
     if(Temp < 300.0) 
         term = 1.14e-31*pow(Temp,(-0.38)); // -31   <-- ABN02 rate
     else
         term = 3.9e-31*pow(Temp,(-1.0)); // -31   <-- ABN02 rate
     
     //R030: 3H --> H2 + H (Forrey 2013)
     term = 6.0e-32*pow(Temp,-0.25) + 2.0e-31/sqrt(Temp);

     //R030: H + H + H --> H2 + H (PSS83 rate)
     //term =  5.5e-29 / Temp;

     RatRaw[iR030] = term * narate * narate; //dens     

     //R031: H + H + H2 --> H2 + H2
     //   term = 1.44e-26*Temp,(-1.54)/8.0  ////9.625e-32*Temp,(-0.464)
     term = RatRaw[iR030]/8.0;
     RatRaw[iR031] = term; 
     //RatRaw[iR031] = term * narate * narate; //dens     

     //R032: H + H + He --> H2 + He
    term = 6.9e-32*pow(Temp,(-0.4));
     RatRaw[iR032] = term * narate * narate; //dens
     
     //R033: DP + e --> D + gamma
     RatRaw[iR033] = RatRaw[iR013];
     
     //R034: D + HP --> H + DP
     if(Temp > 2.0e5)
         term = 3.44e-10*pow(Temp,(0.35));
     else
         term = 2.0e-10*pow(Temp,(0.402))*exp(-37.1/Temp)-3.31e-17*pow(Temp,(1.48));
     
     RatRaw[iR034] = term * narate;
     
     //R035: H + DP --> D + HP
     term = 2.06e-10*pow(Temp,(0.396))*exp(-33.0/Temp)+2.03e-9*pow(Temp,(-0.332));
     RatRaw[iR035] = term * narate;
     
     //R036: H + D --> HD + gam
     if(Temp > 200.0) 
         term = 1.0e-25*exp(507.207-370.889*log(Temp) + 104.854*pow(log(Temp),2.0)     -14.4192*pow(log(Temp),3.0) + 0.971469*pow(log(Temp),4.0) -   0.0258076*pow(log(Temp),5.0));
     else if (Temp < 10.0)
         term = 0.0;
     else
         term = 1.0e-25*(2.80202 - 6.63697*log(Temp) + 4.75619*pow(log(Temp),2.0)-1.39325*pow(log(Temp),3.0) + 0.178259*pow(log(Temp),4.0)-0.00817097*pow(log(Temp),5.0));
     
     RatRaw[iR036] = term * narate;
     
     //R037: H2 + D --> HD + H
     if(Temp > 2000.0) 
         term = 3.17e-10*exp(-5207.0/Temp);
     else
     {
         term = (-56.4737 + 5.888886*lt1 + 7.19692*lt2 + 2.25069*lt3 - 2.16903*lt4 + 0.317887*lt5);
         term = pow(10,term);
     }
     
     RatRaw[iR037] = term * narate;
     
     //R038: HDP + H --> HD + HP
     RatRaw[iR038] = RatRaw[iR004];
     
     //R039: H2 + DP --> HD + HP
     term = 4.17e-10 + 8.46e-10*lt1 - 1.37e-10*lt2;
     RatRaw[iR039] = term * narate;
     
     //R040: HD + H --> H2 + D
     if(Temp > 200.0) 
         term = 5.25e-11*exp(-4430.0/Temp + 173900.0/pow(Temp,2));
     else if(Temp < 50.0) 
         term = 0.0e0;
     else
         term = 5.25e-11*exp(-4430.0/Temp);
     
     RatRaw[iR040] = term * narate;
     
     //R041: HD + HP --> H2 + D+
     term = 1.1e-9*exp(-488.0/Temp);
     RatRaw[iR041] = term * narate;
     
     //R042: D + HP --> HDP + gam
     term = 3.9e-19*pow(t3,(1.8))*exp(20.0/Temp);
     RatRaw[iR042] = term * narate;
     
     //R043: H + DP --> HDP + gam
     term = 3.9e-19*pow(t3,(1.8))*exp(20.0/Temp);
     RatRaw[iR043] = term * narate;
     
     //R044: HDP + e --> H + D
     term = 7.2e-8*pow(Temp,(-0.5));
    RatRaw[iR044] = term * narate; //Had an 'l' at the end of narate? l;
     
     // R045: D + e --> DP + e + e
    RatRaw[iR045] = RatRaw[iR012];
    
     //R046: D + HEP --> HE + DP + gam
     term = 1.1e-15*pow(t3,(0.25));
     RatRaw[iR046] = term * narate;
     
     //R047: He + DP --> D + HeP
     if(Temp > 10000.0) 
         term = 5.9e-37*pow(Temp,(4.74));
     else if(Temp < 1500.0)
         term = 0.0e0;
     else
         term = 1.85e-9*pow(Temp,(-0.75))*exp(-127500.0/Temp);
     
     RatRaw[iR047] = term * narate;
     
     //R048: H2P + D --> HDP + H
     term = 1.07e-9*pow(t3,(0.062))*exp(-Temp/41400.0);
     RatRaw[iR048] = term * narate;
     
     //R049: D + HDP --> HD + DP
     term = 6.4e-10;
     RatRaw[iR049] = term * narate;
     
     //R050: HDP + H --> H2P + D
     term = 1.0e-9*exp(-154.0/Temp);
     RatRaw[iR050] = term * narate;
     
     //R051: D + e --> DM + gam
     RatRaw[iR051] = RatRaw[iR001];
     
     //R052: H + DM --> D + HM
     term = 6.4e-9*pow(t3,(0.41));
     RatRaw[iR052] = term * narate;
     
     //R053: D + HM --> D + DM
     term = 6.4e-9*pow(t3,(0.41));
     RatRaw[iR053] = term * narate;
     
     //R054: D + HM --> HD + e
     //term = 1.5e-9*pow(t3,(-0.1));
     RatRaw[iR054] = 0.5*RatRaw[iR002];
     
     //R055: H + DM --> HD + e
     //term = 1.5e-9*pow(t3,(-0.1));
     RatRaw[iR055] = 0.5*RatRaw[iR002];
     
     //R056: D + DM --> D2 + e
     //term = 1.6e-9*pow(t3,(-0.1));
     RatRaw[iR056] = RatRaw[iR002];
     
     //R057: HD + e --> DM + H
     if(Temp < 500.0) 
         term = 0.0e0;
     else
         term = 1.35e-9*pow(Temp,(-1.27))*exp(-43000.0/Temp);
     
     RatRaw[iR057] = term * narate;
     
     //R058: HD + e --> D + HM
     term = 1.35e-9*pow(Temp,(-1.27))*exp(-43000.0/Temp);
     RatRaw[iR058] = term * narate;
     
     //R059: D2 + e --> D + DM
     term = 6.7e-11*pow(Temp,(-1.27))*exp(-43000.0/Temp);
     RatRaw[iR059] = term * narate;
     
     //R060: HP + DM --> HDP + e
    term = 1.1e-9*pow(t3,(-0.4));
     RatRaw[iR060] = term * narate;
     
     //R061: DP + HM --> HDP + e
    term = 1.1e-9*pow(t3,(-0.4));
     RatRaw[iR061] = term * narate;
     
     //R062: DP + DM --> D2P + e
     term = 1.3e-9*pow(t3,(-0.4));
     RatRaw[iR062] = term * narate;
     
     //R063: DM + e --> D + e +e
     RatRaw[iR063] = RatRaw[iR014];
     
     //R064: DM + H --> D + H +e
     RatRaw[iR064]= RatRaw[iR015];
     
     //R065: DM + He --> D + He + e
     if(Temp < 250.0) 
         term = 0.0e0;
     else
         term = 1.5e-17*pow(Temp,2.0)*exp(-19870.0/Temp);
     
     RatRaw[iR065] = term * narate;
     
     //R066: DP + HM --> D + H
     RatRaw[iR066]=RatRaw[iR005];
     
     //R067: HP + DM --> D + H
     RatRaw[iR067]=RatRaw[iR005];
     
     //R068: DP + DM --> D + D
     RatRaw[iR068]=RatRaw[iR005];
     
     //R069: H2P + DM --> H2 + D
     term = 1.7e-7*pow(t3,(-0.5));
     RatRaw[iR069] = term * narate;
     
     //R070: H2P + DM --> H + H + D
     term = 1.7e-7*pow(t3,(-0.5));
     RatRaw[iR070] = term * narate;
     
     //R071: HDP + HM --> HD + H
     term = 1.5e-7*pow(t3,(-0.5));
     RatRaw[iR071] = term * narate;
     
     //R072: HDP + HM --> D + H + H
    term = 1.5e-7*pow(t3,(-0.5));
     RatRaw[iR072] = term * narate;
     
     //R073: HDP + DM --> HD + D
     term = 1.9e-7*pow(t3,(-0.5));
     RatRaw[iR073] = term * narate;
     
     //R074: HDP + DM --> D + H + D
     term = 1.9e-7*pow(t3,(-0.5));
     RatRaw[iR074] = term * narate;
     
     //R075: D2P + HM --> D2 + H
     term = 1.5e-7*pow(t3,(-0.5));
     RatRaw[iR075] = term * narate;
     
     //R076: D2P + HM --> D + D + H
    term = 1.5e-7*pow(t3,(-0.5));
     RatRaw[iR076] = term * narate;
     
     //R077: D2P + DM --> D2 + D
     term = 2.0e-7*pow(t3,(-0.5));
     RatRaw[iR077] = term * narate;
     
     //R078: D2P + DM --> D + D + D
     term = 2.0e-7*pow(t3,(-0.5));
     RatRaw[iR078] = term * narate;
     
     //R079: HEP + DM --> He + D
     term = 3.03e-7*pow(t3,(-0.52))*exp(Temp/22400.0);
     RatRaw[iR079] = term * narate;
     
     //R080: D + DP --> D2P + gam
     term = 1.9e-19*pow(t3,(1.8))*exp(20.0/Temp);
     RatRaw[iR080] = term * narate;
     
     //R081: D + H2P --> H2 + DP
     term = 6.4e-10;
     RatRaw[iR081] = term * narate;
     
     //R082: H2P + D --> HD + HP
     term = 1.0e-9;
     RatRaw[iR082] = term * narate;
     
     //R083: HDP + H --> H2 + DP
     term = 1.0e-9;
     RatRaw[iR083] = term * narate;
     
     //R084: HDP + D --> D2P + H
     term = 1.0e-9;
     RatRaw[iR084] = term * narate;
     
     //R085: HDP + D --> D2 + HP
     term = 1.0e-9;
     RatRaw[iR085] = term * narate;
     
     //R086: D + D2P --> D2 + DP
     term = 6.4e-10;
     RatRaw[iR086] = term * narate;
     
     //R087: H + D2P --> D2 + HP
     term = 6.4e-10;
     RatRaw[iR087] = term * narate;
     
     //R088: D2P + H --> HDP + D
     term = 1.0e-9*exp(-472.0/Temp);
     RatRaw[iR088] = term * narate;
     
     //R089: D2P + H --> HD + DP
     term = 1.0e-9;
     RatRaw[iR089] = term * narate;
     
     //R090: H2 + DP --> D + H2P
     RatRaw[iR090] = RatRaw[iR007];
     
     
     //R091: H2 + DP --> HDP + H
     if(Temp < 230.0) 
         term = 0.0e0;
     else
         term = (1.04e-9 + 9.52e-9*(Temp/10000.0) - 1.81e-9*pow((Temp/10000.0),2))*exp(-21000.0/Temp);
     
     RatRaw[iR091] = term * narate;
     
     //R092: HD + HP --> H + HDP
     RatRaw[iR092] = RatRaw[iR007];
     
     //R093: HD + HP --> H2P + D
     if(Temp < 230.0) 
         term = 0.0e0;
     else
         term = 1.0e-9*exp(-21600.0/Temp);
     
    RatRaw[iR093] = term * narate;
    
     //R094: HD + DP --> D + HDP
     RatRaw[iR094] = RatRaw[iR007];
     
     //R095: HD + DP --> D2 + HP
     term = 1.0e-9;
     RatRaw[iR095] = term * narate;
     
     //R096: HD + DP --> D2P + H
     term = (3.54e-9 + 7.50e-10*(Temp/10000.0) - 2.92e-10*pow((Temp/10000.0),2))*exp(-21100.0/Temp);
     RatRaw[iR096] = term * narate;
     
     //R097: D2 + HP --> HD + DP
     term = 2.1e-9*exp(-491.0/Temp);
     RatRaw[iR097] = term * narate;
     
     //R098: D2 + HP --> HDP + D
     term = (5.18e-11 + 3.05e-9*(Temp/10000.0) - 5.42e-10*pow((Temp/10000.0),2))*exp(-20100.0/Temp);
     RatRaw[iR098] = term * narate;
     
     //R099: D2 + HP --> H + D2P
     RatRaw[iR099] = RatRaw[iR007];
     
     //R100: D2 + DP --> D2P + D
     RatRaw[iR100] = RatRaw[iR007];
     
     //R101: HD + HEP --> HE + HDP
     term = 7.2e-15;
     RatRaw[iR101] = term * narate;
     
     //R102: HD + HEP --> HE + HP + D
     term = 1.85e-14*exp(35.0/Temp);
     RatRaw[iR102] = term * narate;
     
     //R103: HD + HEP --> HE + HP + D
     term = 1.85e-14*exp(35.0/Temp);
     RatRaw[iR103] = term * narate;
     
     //R104: D2 + HeP --> HE + D2P
     term = 2.5e-14;
     RatRaw[iR104] = term * narate;
     
     //R105: D2 + HeP --> He + DP + D
     term = 1.1e-13*pow(t3,(-0.24));
     RatRaw[iR105] = term * narate;
     
     //R106: HD + D --> D2 + H
     term = 1.15e-11*exp(-3220.0/Temp);
     RatRaw[iR106] = term * narate;
     
     //R107: D2 + H --> HD + D
     if(Temp > 2200.0) 
         term = 2.67e-10*exp(-5945.0/Temp);
     else
     {
         term = -86.1558 + 4.53978*lt1 + 33.5707*lt2 - 13.0449*lt3 + 1.22017*lt4 + 0.0482453*lt5;
         term = pow(10,term);
     }
     
     RatRaw[iR107] = term * narate;
     
     //R108: HD + H --> H + D +H
     term = nv2*log10(6.67e-12*pow(Temp,(0.5))*exp(-(1.0+63593.0/Temp)));
     term = term + nlte2*log10(3.52e-9*exp(-43900.0/Temp));
     term = pow(10,(term));
     RatRaw[iR108 ] = term * narate; //RatRaw[iR009)
     
     //R109: HD + H2 --> H + D + H2
     term = (5.996e-30*pow(Temp,(4.1881))/pow((1.0+6.761e-6*Temp),(5.6881)))*exp(-54657.4/Temp);
     term = nv2*log10(term);
     term = term + nlte2*log10(1.3e-9*exp(-53300.0/Temp)); //Simon's Rate
     term = pow(10,(term));
     RatRaw[iR109] = term * narate;
     //   RatRaw[iR109RatRaw[iR010)
     
     //R110: HD + He --> H + D + He
     term = nv2*(-27.029+3.801*lt1-29487.0/Temp);
     term = term + nlte2*(-2.729-1.75*lt1-23474.0/Temp) ;  //6.6e-10*Temp,(0.115)*exp(-52000.0/Temp))
     term = pow(10,(term));
     //   term = pow(10,(-27.029+3.801*lt1-29487.0/Temp));
     RatRaw[iR110] = term * narate;
     //   RatRaw[iR110RatRaw[iR011)
     
     //R111: HD + e --> H + D + e
     term = 0.0e0;
     term = nv2*log10(5.09e-9*pow(Temp,(0.128))*exp(-103258.0/Temp));
     term = term + nlte2*log10(1.04e-9*pow(Temp,(0.218))*exp(-53070.7/Temp));
     term = pow(10,(term));
     //    term = 5.09e-9*pow(Temp,(0.128))*exp(-103258.0/Temp);
     RatRaw[iR111] = term * narate;
     
     //R112: D2 + H --> D + D + H
     RatRaw[iR112]=RatRaw[iR009];
     
     //R113: D2 + H2 --> D + D + H2
     RatRaw[iR113]=RatRaw[iR010];
     
     //R114: D2 + He --> D + D + He
     RatRaw[iR114]=RatRaw[iR011];
     
     //R115: D2 + e --> D + D + e
     term = 0.0e0;
     term = nv*log10(8.24e-9*pow(Temp,(0.126))*exp(-105388.0/Temp));
     term = term + nlte*log10(2.75e-9*pow(Temp,(0.163))*exp(-53339.7/Temp));
     term = pow(10,(term));
     //   term = 8.24e-9*pow(Temp,(0.126))*exp(-105388.0/Temp);
     RatRaw[iR115] = term * narate;
     
     //R116: HM + gam --> H + e
     term = 1.36e-11*j21;
     RatRaw[iR116]=term;
     
     //R117: DM + gam --> D + e
     term = 1.36e-11*j21;
     RatRaw[iR117]=term ;
     
     //R118: H2P + gam --> H + HP
     term = 4.11e-12*j21;
     RatRaw[iR118]=term;
     
     //R119: HDP + gam --> H + DP
     term = 2.05e-12*j21;
     RatRaw[iR119]=term;
     
     //R120: HDP + gam --> D + HP
     term = 2.05e-12*j21;
     RatRaw[iR120]=term;
     
     //R121: D2P + gam --> D + DP
     term = 4.11e-12*j21;
     RatRaw[iR121]=term;
     
     //R122: H2 + gam --> H + H
     term = 1.3e-12*fssh2*j21;
     RatRaw[iR122]=term;
     
     //R123: HD + gam --> H + D
     term = 1.45e-12*fsshd*j21;
     RatRaw[iR123]=term;
     
     //R124: D2 + gam --> D + D
     term = 1.3e-12*j21;
     RatRaw[iR124]=term;
     
    //cout << "ratraw" << endl;
    //for(i=0;i<124;i++)  cout << RatRaw[i] << endl;
    //cout << "ratraw end" <<endl;

   //printf("GetNetworkRates Temp = %lg\n", Temp);
   //for(i=0;i<3;i++) printf("GetNetworkRates i = %d, RadParams = %lg\n", i, RadParams[i]);
   //for(i=0;i<NREACTION;i++) printf("GetNetworkRates i = %d, RatRaw = %lg\n", i, RatRaw[i]);
    
};


void GetNetwork(REAL tt,REAL* dydt, REAL* ratraw, REAL* ys)
{
    int i;
    int ie = iELEC;
   
    //for(i=0;i<NSPECIES;i++) printf("GetNetwork i = %d, y = %lg dydx = %lg RatRaw = %lg\n", i, ys[i], dydt[i], ratraw[2*i]);
 
    for(i=0;i<NSPECIES;i++) dydt[i]=0.0;
    
    
    dydt[iHP] = -ratraw[iR003]*ys[iH]*ys[iHP]
                +ratraw[iR004]*ys[iH]*ys[iH2P] 
                -ratraw[iR005]*ys[iHM]*ys[iHP]
                -ratraw[iR007]*ys[iH2]*ys[iHP] 
                +ratraw[iR012]*ys[iH]*ys[ie]
                -ratraw[iR013]*ys[iHP]*ys[ie] 
                -ratraw[iR016]*ys[iHP]*ys[iHM]
                +ratraw[iR024]*ys[iH2]*ys[iHEP] 
                +ratraw[iR026]*ys[iHEP]*ys[iH]
                -ratraw[iR027]*ys[iHE]*ys[iHP] 
                -ratraw[iR034]*ys[iD]*ys[iHP]
                +ratraw[iR035]*ys[iH]*ys[iDP] 
                +ratraw[iR038]*ys[iHDP]*ys[iH]
                +ratraw[iR039]*ys[iH2]*ys[iDP] 
                -ratraw[iR041]*ys[iHD]*ys[iHP]
                -ratraw[iR042]*ys[iD]*ys[iHP] 
                -ratraw[iR060]*ys[iHP]*ys[iDM]
                -ratraw[iR067]*ys[iHP]*ys[iDM] 
                +ratraw[iR082]*ys[iH2P]*ys[iD]
                +ratraw[iR085]*ys[iHDP]*ys[iD] 
                +ratraw[iR087]*ys[iH]*ys[iD2P]
                -ratraw[iR092]*ys[iHD]*ys[iHP] 
                -ratraw[iR093]*ys[iHD]*ys[iHP]
                +ratraw[iR095]*ys[iHD]*ys[iDP] 
                -ratraw[iR097]*ys[iD2]*ys[iHP]
                -ratraw[iR098]*ys[iD2]*ys[iHP] 
                -ratraw[iR099]*ys[iD2]*ys[iHP]
                +ratraw[iR102]*ys[iHD]*ys[iHEP] 
                +ratraw[iR118]*ys[iH2P]
                 +ratraw[iR120]*ys[iHDP];
    
    
         dydt[iH] =  -ratraw[iR001]*ys[iH]*ys[ie]
                     -ratraw[iR002]*ys[iHM]*ys[iH]
                     -ratraw[iR003]*ys[iH]*ys[iHP]
                     -ratraw[iR004]*ys[iH]*ys[iH2P]
                      +ratraw[iR005]*ys[iHM]*ys[iHP]
                      +ratraw[iR005]*ys[iHM]*ys[iHP]
                      +ratraw[iR006]*ys[iH2P]*ys[ie]
                      +ratraw[iR006]*ys[iH2P]*ys[ie]
                      +ratraw[iR007]*ys[iH2]*ys[iHP]
                      +ratraw[iR008]*ys[iH2]*ys[ie]  +ratraw[iR008]*ys[iH2]*ys[ie]
                      +ratraw[iR009]*ys[iH2]*ys[iH]  +ratraw[iR009]*ys[iH2]*ys[iH]
                      +ratraw[iR010]*ys[iH2]*ys[iH2] +ratraw[iR010]*ys[iH2]*ys[iH2]
                      +ratraw[iR011]*ys[iH2]*ys[iHE] +ratraw[iR011]*ys[iH2]*ys[iHE]
                      -ratraw[iR012]*ys[iH]*ys[ie]    
                      +ratraw[iR013]*ys[iHP]*ys[ie]
                      +ratraw[iR014]*ys[iHM]*ys[ie]    
                      +ratraw[iR015]*ys[iHM]*ys[iH]
                      +ratraw[iR021]*ys[iHM]*ys[iH2P]    
                      +ratraw[iR022]*ys[iHM]*ys[iH2P]
                      +ratraw[iR022]*ys[iHM]*ys[iH2P]  +ratraw[iR022]*ys[iHM]*ys[iH2P]
                      +ratraw[iR023]*ys[iH2]*ys[ie]    
                      +ratraw[iR024]*ys[iH2]*ys[iHEP]
                      -ratraw[iR026]*ys[iHEP]*ys[iH]    
                      +ratraw[iR027]*ys[iHE]*ys[iHP]
                      +ratraw[iR028]*ys[iHEP]*ys[iHM]    
                      +ratraw[iR029]*ys[iHE]*ys[iHM]
                      -ratraw[iR030]*ys[iH]*ys[iH]*ys[iH]    
                      -ratraw[iR030]*ys[iH]*ys[iH]*ys[iH]
                      -ratraw[iR031]*ys[iH]*ys[iH]*ys[iH2]    
                      -ratraw[iR031]*ys[iH]*ys[iH]*ys[iH2]
                      -ratraw[iR032]*ys[iH]*ys[iH]*ys[iHE]    
                      -ratraw[iR032]*ys[iH]*ys[iH]*ys[iHE]
                      +ratraw[iR034]*ys[iD]*ys[iHP]    
                      -ratraw[iR035]*ys[iH]*ys[iDP]
                      -ratraw[iR036]*ys[iH]*ys[iD]    
                      +ratraw[iR037]*ys[iH2]*ys[iD]
                      -ratraw[iR038]*ys[iHDP]*ys[iH]    
                      -ratraw[iR040]*ys[iHD]*ys[iH]
                       -ratraw[iR043]*ys[iH]*ys[iDP]    
                       +ratraw[iR044]*ys[iHDP]*ys[ie]
                       +ratraw[iR048]*ys[iH2P]*ys[iD]    
                       -ratraw[iR050]*ys[iHDP]*ys[iH]
                       -ratraw[iR052]*ys[iH]*ys[iDM]    
                       +ratraw[iR053]*ys[iD]*ys[iHM]
                       -ratraw[iR055]*ys[iH]*ys[iDM]    
                       +ratraw[iR057]*ys[iHD]*ys[ie]
                       -ratraw[iR064]*ys[iDM]*ys[iH]    
                       +ratraw[iR064]*ys[iDM]*ys[iH]
                       +ratraw[iR066]*ys[iDP]*ys[iHM]    
                       +ratraw[iR067]*ys[iHP]*ys[iDM]
                       +ratraw[iR070]*ys[iH2P]*ys[iDM]    
                       +ratraw[iR070]*ys[iH2P]*ys[iDM]
                       +ratraw[iR071]*ys[iHDP]*ys[iHM]    
                       +ratraw[iR072]*ys[iHDP]*ys[iHM]
                       +ratraw[iR072]*ys[iHDP]*ys[iHM]    
                       +ratraw[iR074]*ys[iHDP]*ys[iDM]
                       +ratraw[iR075]*ys[iD2P]*ys[iHM]    
                       +ratraw[iR076]*ys[iD2P]*ys[iHM]
                       -ratraw[iR083]*ys[iHDP]*ys[iH]    
                       +ratraw[iR084]*ys[iHDP]*ys[iD]
                       -ratraw[iR087]*ys[iH]*ys[iD2P]    
                       -ratraw[iR088]*ys[iD2P]*ys[iH]
                       -ratraw[iR089]*ys[iD2P]*ys[iH]    
                       +ratraw[iR091]*ys[iH2]*ys[iDP]
                       +ratraw[iR092]*ys[iHD]*ys[iHP]    
                       +ratraw[iR096]*ys[iHD]*ys[iDP]
                       +ratraw[iR099]*ys[iD2]*ys[iHP]    
                       +ratraw[iR103]*ys[iHD]*ys[iHEP]
                       +ratraw[iR106]*ys[iHD]*ys[iD]    
                       -ratraw[iR107]*ys[iD2]*ys[iH]
                       -ratraw[iR108]*ys[iHD]*ys[iH]    
                       +ratraw[iR108]*ys[iHD]*ys[iH]
                       +ratraw[iR108]*ys[iHD]*ys[iH]    
                       +ratraw[iR109]*ys[iHD]*ys[iH2]
                       +ratraw[iR110]*ys[iHD]*ys[iHE]    
                       +ratraw[iR111]*ys[iHD]*ys[ie]
                       -ratraw[iR112]*ys[iD2]*ys[iH]    
                       +ratraw[iR112]*ys[iD2]*ys[iH]
                       +ratraw[iR116]*ys[iHM]    
                       +ratraw[iR118]*ys[iH2P]
                       +ratraw[iR119]*ys[iHDP]    
                       +ratraw[iR122]*ys[iH2]
                       +ratraw[iR122]*ys[iH2]
                       +ratraw[iR123]*ys[iHD];
    
    dydt[iHM] =  ratraw[iR001]*ys[iH]*ys[ie]
                -ratraw[iR002]*ys[iHM]*ys[iH]    
                -ratraw[iR005]*ys[iHM]*ys[iHP]
                -ratraw[iR014]*ys[iHM]*ys[ie]    
                -ratraw[iR015]*ys[iHM]*ys[iH]
                -ratraw[iR016]*ys[iHP]*ys[iHM]    
                -ratraw[iR021]*ys[iHM]*ys[iH2P]
                -ratraw[iR022]*ys[iHM]*ys[iH2P]    
                +ratraw[iR023]*ys[iH2]*ys[ie]
                -ratraw[iR028]*ys[iHEP]*ys[iHM]    
                 -ratraw[iR029]*ys[iHE]*ys[iHM]
                 +ratraw[iR052]*ys[iH]*ys[iDM]    
                 -ratraw[iR053]*ys[iD]*ys[iHM]
                 -ratraw[iR054]*ys[iD]*ys[iHM]    
                +ratraw[iR058]*ys[iHD]*ys[ie]
                -ratraw[iR061]*ys[iDP]*ys[iHM]    
                -ratraw[iR066]*ys[iDP]*ys[iHM]
                -ratraw[iR071]*ys[iHDP]*ys[iHM]    
                -ratraw[iR072]*ys[iHDP]*ys[iHM]
                -ratraw[iR075]*ys[iD2P]*ys[iHM]    
                -ratraw[iR076]*ys[iD2P]*ys[iHM]
                -ratraw[iR116]*ys[iHM];
    
             dydt[iH2P] =  ratraw[iR003]*ys[iH]*ys[iHP]
                          -ratraw[iR004]*ys[iH]*ys[iH2P]    
                          -ratraw[iR006]*ys[iH2P]*ys[ie]
                          +ratraw[iR007]*ys[iH2]*ys[iHP]    
                          +ratraw[iR016]*ys[iHP]*ys[iHM]
                          -ratraw[iR021]*ys[iHM]*ys[iH2P]    
                          -ratraw[iR022]*ys[iHM]*ys[iH2P]
                          +ratraw[iR025]*ys[iH2]*ys[iHEP]    
                          -ratraw[iR048]*ys[iH2P]*ys[iD]
                          +ratraw[iR050]*ys[iHDP]*ys[iH]    
                          -ratraw[iR069]*ys[iH2P]*ys[iDM]
                          -ratraw[iR070]*ys[iH2P]*ys[iDM]    
                          -ratraw[iR081]*ys[iD]*ys[iH2P]
                          -ratraw[iR082]*ys[iH2P]*ys[iD]    
                          +ratraw[iR090]*ys[iH2]*ys[iDP]
                          +ratraw[iR093]*ys[iHD]*ys[iHP]    
                          -ratraw[iR118]*ys[iH2P];
    
            dydt[iH2] =  ratraw[iR002]*ys[iHM]*ys[iH]
                        +ratraw[iR004]*ys[iH]*ys[iH2P]    
                        -ratraw[iR007]*ys[iH2]*ys[iHP]
                        -ratraw[iR008]*ys[iH2]*ys[ie]    
                        -ratraw[iR009]*ys[iH2]*ys[iH]
                        -ratraw[iR010]*ys[iH2]*ys[iH2]    
                        -ratraw[iR011]*ys[iH2]*ys[iHE]
                        +ratraw[iR021]*ys[iHM]*ys[iH2P]    
                        -ratraw[iR023]*ys[iH2]*ys[ie]
                        -ratraw[iR024]*ys[iH2]*ys[iHEP]    
                        -ratraw[iR025]*ys[iH2]*ys[iHEP]
                        +ratraw[iR030]*ys[iH]*ys[iH]*ys[iH]    
                        +ratraw[iR031]*ys[iH]*ys[iH]*ys[iH2]
                        +ratraw[iR032]*ys[iH]*ys[iH]*ys[iHE]    
                        -ratraw[iR037]*ys[iH2]*ys[iD]
                        -ratraw[iR039]*ys[iH2]*ys[iDP]    
                        +ratraw[iR040]*ys[iHD]*ys[iH]
                        +ratraw[iR041]*ys[iHD]*ys[iHP]    
                        +ratraw[iR069]*ys[iH2P]*ys[iDM]
                        +ratraw[iR081]*ys[iD]*ys[iH2P]    
                        +ratraw[iR083]*ys[iHDP]*ys[iH]
                        -ratraw[iR090]*ys[iH2]*ys[iDP]    
                        -ratraw[iR091]*ys[iH2]*ys[iDP]
                        -ratraw[iR109]*ys[iHD]*ys[iH2]    
                        +ratraw[iR109]*ys[iHD]*ys[iH2]
                        -ratraw[iR113]*ys[iD2]*ys[iH2]    
                        +ratraw[iR113]*ys[iD2]*ys[iH2]
                        -ratraw[iR122]*ys[iH2];
    
                    dydt[iDP] =  -ratraw[iR033]*ys[iDP]*ys[ie]
                                 +ratraw[iR034]*ys[iD]*ys[iHP]    
                                 -ratraw[iR035]*ys[iH]*ys[iDP]
                                 -ratraw[iR039]*ys[iH2]*ys[iDP]    
                                 +ratraw[iR041]*ys[iHD]*ys[iHP]
                                 -ratraw[iR043]*ys[iH]*ys[iDP]    
                                 +ratraw[iR045]*ys[iD]*ys[ie]
                                 +ratraw[iR046]*ys[iHEP]*ys[iD]    
                                 -ratraw[iR047]*ys[iHE]*ys[iDP]
                                 +ratraw[iR049]*ys[iHDP]*ys[iD]    
                                 -ratraw[iR061]*ys[iDP]*ys[iHM]
                                 -ratraw[iR062]*ys[iDP]*ys[iDM]    
                                 -ratraw[iR066]*ys[iDP]*ys[iHM]
                                 -ratraw[iR068]*ys[iDP]*ys[iDM]    
                                 -ratraw[iR080]*ys[iD]*ys[iDP]
                                 +ratraw[iR081]*ys[iD]*ys[iH2P]    
                                 +ratraw[iR083]*ys[iHDP]*ys[iH]
                                 +ratraw[iR086]*ys[iD]*ys[iD2P]    
                                 +ratraw[iR089]*ys[iD2P]*ys[iH]
                                 -ratraw[iR090]*ys[iH2]*ys[iDP]    
                                 -ratraw[iR091]*ys[iH2]*ys[iDP]
                                 -ratraw[iR094]*ys[iHD]*ys[iDP]    
                                 -ratraw[iR095]*ys[iHD]*ys[iDP]
                                 -ratraw[iR096]*ys[iHD]*ys[iDP]    
                                 +ratraw[iR097]*ys[iD2]*ys[iHP]
                                 -ratraw[iR100]*ys[iD2]*ys[iDP]    
                                 +ratraw[iR103]*ys[iHD]*ys[iHEP]
                                 +ratraw[iR105]*ys[iD2]*ys[iHEP]    
                                 +ratraw[iR119]*ys[iHDP]
                                 +ratraw[iR121]*ys[iD2P];
    
    dydt[iD] =  ratraw[iR033]*ys[iDP]*ys[ie]-ratraw[iR034]*ys[iD]*ys[iHP]    +ratraw[iR035]*ys[iH]*ys[iDP]-ratraw[iR036]*ys[iH]*ys[iD]    -ratraw[iR037]*ys[iH2]*ys[iD]+ratraw[iR040]*ys[iHD]*ys[iH]    -ratraw[iR042]*ys[iD]*ys[iHP]+ratraw[iR044]*ys[iHDP]*ys[ie]    -ratraw[iR045]*ys[iD]*ys[ie]-ratraw[iR046]*ys[iHEP]*ys[iD]    +ratraw[iR047]*ys[iHE]*ys[iDP]-ratraw[iR048]*ys[iH2P]*ys[iD]    -ratraw[iR049]*ys[iHDP]*ys[iD]+ratraw[iR050]*ys[iHDP]*ys[iH]    -ratraw[iR051]*ys[iD]*ys[ie]+ratraw[iR052]*ys[iH]*ys[iDM]    -ratraw[iR053]*ys[iD]*ys[iHM]-ratraw[iR054]*ys[iD]*ys[iHM]    -ratraw[iR056]*ys[iD]*ys[iDM]+ratraw[iR058]*ys[iHD]*ys[ie]    +ratraw[iR059]*ys[iD2]*ys[ie]+ratraw[iR063]*ys[iDM]*ys[ie]    +ratraw[iR064]*ys[iDM]*ys[iH]+ratraw[iR065]*ys[iDM]*ys[iHE]    +ratraw[iR066]*ys[iDP]*ys[iHM]+ratraw[iR067]*ys[iHP]*ys[iDM]+ratraw[iR068]*ys[iDP]*ys[iDM]+ratraw[iR068]*ys[iDP]*ys[iDM]+ratraw[iR069]*ys[iH2P]*ys[iDM]+ratraw[iR070]*ys[iH2P]*ys[iDM]    +ratraw[iR072]*ys[iHDP]*ys[iHM]+ratraw[iR073]*ys[iHDP]*ys[iDM]+ratraw[iR074]*ys[iHDP]*ys[iDM]+ratraw[iR074]*ys[iHDP]*ys[iDM]+ratraw[iR076]*ys[iD2P]*ys[iHM]+ratraw[iR076]*ys[iD2P]*ys[iHM]+ratraw[iR077]*ys[iD2P]*ys[iDM]+ratraw[iR078]*ys[iD2P]*ys[iDM]    +ratraw[iR078]*ys[iD2P]*ys[iDM]+ratraw[iR078]*ys[iD2P]*ys[iDM]    +ratraw[iR079]*ys[iHEP]*ys[iDM]-ratraw[iR080]*ys[iD]*ys[iDP]    -ratraw[iR081]*ys[iD]*ys[iH2P]-ratraw[iR082]*ys[iH2P]*ys[iD]    -ratraw[iR084]*ys[iHDP]*ys[iD]-ratraw[iR085]*ys[iHDP]*ys[iD]    -ratraw[iR086]*ys[iD]*ys[iD2P]+ratraw[iR088]*ys[iD2P]*ys[iH]    +ratraw[iR090]*ys[iH2]*ys[iDP]+ratraw[iR093]*ys[iHD]*ys[iHP]    +ratraw[iR094]*ys[iHD]*ys[iDP]+ratraw[iR098]*ys[iD2]*ys[iHP]    +ratraw[iR100]*ys[iD2]*ys[iDP]+ratraw[iR102]*ys[iHD]*ys[iHEP]    +ratraw[iR105]*ys[iD2]*ys[iHEP]-ratraw[iR106]*ys[iHD]*ys[iD]    +ratraw[iR107]*ys[iD2]*ys[iH]+ratraw[iR108]*ys[iHD]*ys[iH]    +ratraw[iR109]*ys[iHD]*ys[iH2]+ratraw[iR110]*ys[iHD]*ys[iHE]    +ratraw[iR111]*ys[iHD]*ys[ie]+ratraw[iR112]*ys[iD2]*ys[iH]    +ratraw[iR112]*ys[iD2]*ys[iH]+ratraw[iR113]*ys[iD2]*ys[iH2]    +ratraw[iR113]*ys[iD2]*ys[iH2]+ratraw[iR114]*ys[iD2]*ys[iHE]    +ratraw[iR114]*ys[iD2]*ys[iHE]+ratraw[iR115]*ys[iD2]*ys[ie]    +ratraw[iR115]*ys[iD2]*ys[ie]+ratraw[iR117]*ys[iDM]    +ratraw[iR120]*ys[iHDP]+ratraw[iR121]*ys[iD2P]+ratraw[iR123]*ys[iHD]    +ratraw[iR124]*ys[iD2]+ratraw[iR124]*ys[iD2];
    

    dydt[iDM] =
    ratraw[iR051]*ys[iD]*ys[ie]-ratraw[iR052]*ys[iH]*ys[iDM]
    +ratraw[iR053]*ys[iD]*ys[iHM]-ratraw[iR055]*ys[iH]*ys[iDM]
    -ratraw[iR056]*ys[iD]*ys[iDM]+ratraw[iR057]*ys[iHD]*ys[ie]
    +ratraw[iR059]*ys[iD2]*ys[ie]-ratraw[iR060]*ys[iHP]*ys[iDM]
    -ratraw[iR062]*ys[iDP]*ys[iDM]-ratraw[iR063]*ys[iDM]*ys[ie]
    -ratraw[iR064]*ys[iDM]*ys[iH]-ratraw[iR065]*ys[iDM]*ys[iHE]
    -ratraw[iR067]*ys[iHP]*ys[iDM]-ratraw[iR068]*ys[iDP]*ys[iDM]
    -ratraw[iR069]*ys[iH2P]*ys[iDM]-ratraw[iR070]*ys[iH2P]*ys[iDM]
    -ratraw[iR073]*ys[iHDP]*ys[iDM]-ratraw[iR074]*ys[iHDP]*ys[iDM]
    -ratraw[iR077]*ys[iD2P]*ys[iDM]-ratraw[iR078]*ys[iD2P]*ys[iDM]
    -ratraw[iR079]*ys[iHEP]*ys[iDM]-ratraw[iR117]*ys[iDM];
    
    dydt[iHDP] =  -ratraw[iR038]*ys[iHDP]*ys[iH]+ratraw[iR042]*ys[iD]*ys[iHP]    +ratraw[iR043]*ys[iH]*ys[iDP]-ratraw[iR044]*ys[iHDP]*ys[ie]    +ratraw[iR048]*ys[iH2P]*ys[iD]-ratraw[iR049]*ys[iHDP]*ys[iD]    -ratraw[iR050]*ys[iHDP]*ys[iH]+ratraw[iR060]*ys[iHP]*ys[iDM]    +ratraw[iR061]*ys[iDP]*ys[iHM]-ratraw[iR071]*ys[iHDP]*ys[iHM]    -ratraw[iR072]*ys[iHDP]*ys[iHM]-ratraw[iR073]*ys[iHDP]*ys[iDM]    -ratraw[iR074]*ys[iHDP]*ys[iDM]-ratraw[iR083]*ys[iHDP]*ys[iH]    -ratraw[iR084]*ys[iHDP]*ys[iD]-ratraw[iR085]*ys[iHDP]*ys[iD]    +ratraw[iR088]*ys[iD2P]*ys[iH]+ratraw[iR091]*ys[iH2]*ys[iDP]    +ratraw[iR092]*ys[iHD]*ys[iHP]+ratraw[iR094]*ys[iHD]*ys[iDP]    +ratraw[iR098]*ys[iD2]*ys[iHP]+ratraw[iR101]*ys[iHD]*ys[iHEP]    -ratraw[iR119]*ys[iHDP]-ratraw[iR120]*ys[iHDP];
    
      dydt[iHD] =  ratraw[iR036]*ys[iH]*ys[iD]
                   +ratraw[iR037]*ys[iH2]*ys[iD]    
                   +ratraw[iR038]*ys[iHDP]*ys[iH]
                   +ratraw[iR039]*ys[iH2]*ys[iDP]    
                   -ratraw[iR040]*ys[iHD]*ys[iH]
                   -ratraw[iR041]*ys[iHD]*ys[iHP]    
                   +ratraw[iR049]*ys[iHDP]*ys[iD]
                   +ratraw[iR054]*ys[iD]*ys[iHM]    
                   +ratraw[iR055]*ys[iH]*ys[iDM]
                   -ratraw[iR057]*ys[iHD]*ys[ie]    
                   -ratraw[iR058]*ys[iHD]*ys[ie]
                   +ratraw[iR071]*ys[iHDP]*ys[iHM]    
                   +ratraw[iR073]*ys[iHDP]*ys[iDM]
                   +ratraw[iR082]*ys[iH2P]*ys[iD]    
                   +ratraw[iR089]*ys[iD2P]*ys[iH]
                   -ratraw[iR092]*ys[iHD]*ys[iHP]    
                   -ratraw[iR093]*ys[iHD]*ys[iHP]
                   -ratraw[iR094]*ys[iHD]*ys[iDP]    
                   -ratraw[iR095]*ys[iHD]*ys[iDP]
                   -ratraw[iR096]*ys[iHD]*ys[iDP]    
                   +ratraw[iR097]*ys[iD2]*ys[iHP]
                   -ratraw[iR101]*ys[iHD]*ys[iHEP]    
                   -ratraw[iR102]*ys[iHD]*ys[iHEP]
                   -ratraw[iR103]*ys[iHD]*ys[iHEP]    
                   -ratraw[iR106]*ys[iHD]*ys[iD]
                   +ratraw[iR107]*ys[iD2]*ys[iH]    
                   -ratraw[iR108]*ys[iHD]*ys[iH]
                   -ratraw[iR109]*ys[iHD]*ys[iH2]    
                   -ratraw[iR110]*ys[iHD]*ys[iHE]
                   -ratraw[iR111]*ys[iHD]*ys[ie]
                   -ratraw[iR123]*ys[iHD];
    
    dydt[iD2P] =  ratraw[iR062]*ys[iDP]*ys[iDM]-ratraw[iR075]*ys[iD2P]*ys[iHM]    -ratraw[iR076]*ys[iD2P]*ys[iHM]-ratraw[iR077]*ys[iD2P]*ys[iDM]    -ratraw[iR078]*ys[iD2P]*ys[iDM]+ratraw[iR080]*ys[iD]*ys[iDP]    +ratraw[iR084]*ys[iHDP]*ys[iD]-ratraw[iR086]*ys[iD]*ys[iD2P]    -ratraw[iR087]*ys[iH]*ys[iD2P]-ratraw[iR088]*ys[iD2P]*ys[iH]    -ratraw[iR089]*ys[iD2P]*ys[iH]+ratraw[iR096]*ys[iHD]*ys[iDP]    +ratraw[iR099]*ys[iD2]*ys[iHP]+ratraw[iR100]*ys[iD2]*ys[iDP]    +ratraw[iR104]*ys[iD2]*ys[iHEP]-ratraw[iR121]*ys[iD2P];
    
    dydt[iD2] =  ratraw[iR056]*ys[iD]*ys[iDM]-ratraw[iR059]*ys[iD2]*ys[ie]+ratraw[iR075]*ys[iD2P]*ys[iHM]+ratraw[iR077]*ys[iD2P]*ys[iDM]    +ratraw[iR085]*ys[iHDP]*ys[iD]+ratraw[iR086]*ys[iD]*ys[iD2P]+ratraw[iR087]*ys[iH]*ys[iD2P]+ratraw[iR095]*ys[iHD]*ys[iDP]    -ratraw[iR097]*ys[iD2]*ys[iHP]-ratraw[iR098]*ys[iD2]*ys[iHP]-ratraw[iR099]*ys[iD2]*ys[iHP]-ratraw[iR100]*ys[iD2]*ys[iDP]    -ratraw[iR104]*ys[iD2]*ys[iHEP]-ratraw[iR105]*ys[iD2]*ys[iHEP]+ratraw[iR106]*ys[iHD]*ys[iD]-ratraw[iR107]*ys[iD2]*ys[iH]    -ratraw[iR112]*ys[iD2]*ys[iH]-ratraw[iR113]*ys[iD2]*ys[iH2]-ratraw[iR114]*ys[iD2]*ys[iHE]-ratraw[iR115]*ys[iD2]*ys[ie]    -ratraw[iR124]*ys[iD2];
    
    dydt[iHEP] =   ratraw[iR017]*ys[iHE]*ys[ie]-ratraw[iR018]*ys[iHEP]*ys[ie]
                  -ratraw[iR019]*ys[iHEP]*ys[ie]+ratraw[iR020]*ys[iHEPP]*ys[ie]
                  -ratraw[iR024]*ys[iH2]*ys[iHEP]-ratraw[iR025]*ys[iH2]*ys[iHEP]
                  -ratraw[iR026]*ys[iHEP]*ys[iH]+ratraw[iR027]*ys[iHE]*ys[iHP]
                   -ratraw[iR028]*ys[iHEP]*ys[iHM]-ratraw[iR046]*ys[iHEP]*ys[iD]
                   +ratraw[iR047]*ys[iHE]*ys[iDP]-ratraw[iR079]*ys[iHEP]*ys[iDM]
                   -ratraw[iR101]*ys[iHD]*ys[iHEP]-ratraw[iR102]*ys[iHD]*ys[iHEP]
                   -ratraw[iR103]*ys[iHD]*ys[iHEP]-ratraw[iR104]*ys[iD2]*ys[iHEP]
                   -ratraw[iR105]*ys[iD2]*ys[iHEP];
                                                    
    dydt[iHE] =  -ratraw[iR011]*ys[iH2]*ys[iHE]+ratraw[iR011]*ys[iH2]*ys[iHE]-ratraw[iR017]*ys[iHE]*ys[ie]+ratraw[iR019]*ys[iHEP]*ys[ie]+ratraw[iR024]*ys[iH2]*ys[iHEP]+ratraw[iR025]*ys[iH2]*ys[iHEP]+ratraw[iR026]*ys[iHEP]*ys[iH]-ratraw[iR027]*ys[iHE]*ys[iHP]+ratraw[iR028]*ys[iHEP]*ys[iHM]-ratraw[iR029]*ys[iHE]*ys[iHM]+ratraw[iR029]*ys[iHE]*ys[iHM]-ratraw[iR032]*ys[iH]*ys[iH]*ys[iHE]+ratraw[iR032]*ys[iH]*ys[iH]*ys[iHE]+ratraw[iR046]*ys[iHEP]*ys[iD]-ratraw[iR047]*ys[iHE]*ys[iDP]-ratraw[iR065]*ys[iDM]*ys[iHE]        +ratraw[iR065]*ys[iDM]*ys[iHE]+ratraw[iR079]*ys[iHEP]*ys[iDM]        +ratraw[iR101]*ys[iHD]*ys[iHEP]+ratraw[iR102]*ys[iHD]*ys[iHEP]        +ratraw[iR103]*ys[iHD]*ys[iHEP]+ratraw[iR104]*ys[iD2]*ys[iHEP]        +ratraw[iR105]*ys[iD2]*ys[iHEP]-ratraw[iR110]*ys[iHD]*ys[iHE]        +ratraw[iR110]*ys[iHD]*ys[iHE]-ratraw[iR114]*ys[iD2]*ys[iHE]        +ratraw[iR114]*ys[iD2]*ys[iHE];
        
    dydt[iHEPP] =  ratraw[iR018]*ys[iHEP]*ys[ie]-ratraw[iR020]*ys[iHEPP]*ys[ie];
                                                                      
  dydt[iELEC] =  -ratraw[iR001]*ys[iH]*ys[ie]+ratraw[iR002]*ys[iHM]*ys[iH]-ratraw[iR006]*ys[iH2P]*ys[ie]-ratraw[iR008]*ys[iH2]*ys[ie]+ratraw[iR008]*ys[iH2]*ys[ie]-ratraw[iR012]*ys[iH]*ys[ie]+ratraw[iR012]*ys[iH]*ys[ie]+ratraw[iR012]*ys[iH]*ys[ie]-ratraw[iR013]*ys[iHP]*ys[ie]-ratraw[iR014]*ys[iHM]*ys[ie]+ratraw[iR014]*ys[iHM]*ys[ie]+ratraw[iR014]*ys[iHM]*ys[ie]+ratraw[iR015]*ys[iHM]*ys[iH]+ratraw[iR016]*ys[iHP]*ys[iHM]-ratraw[iR017]*ys[iHE]*ys[ie]+ratraw[iR017]*ys[iHE]*ys[ie]+ratraw[iR017]*ys[iHE]*ys[ie]-ratraw[iR018]*ys[iHEP]*ys[ie]+ratraw[iR018]*ys[iHEP]*ys[ie]+ratraw[iR018]*ys[iHEP]*ys[ie]  -ratraw[iR019]*ys[iHEP]*ys[ie]-ratraw[iR020]*ys[iHEPP]*ys[ie]-ratraw[iR023]*ys[iH2]*ys[ie]+ratraw[iR029]*ys[iHE]*ys[iHM]-ratraw[iR033]*ys[iDP]*ys[ie]-ratraw[iR044]*ys[iHDP]*ys[ie]-ratraw[iR045]*ys[iD]*ys[ie]+ratraw[iR045]*ys[iD]*ys[ie]+ratraw[iR045]*ys[iD]*ys[ie]-ratraw[iR051]*ys[iD]*ys[ie]  +ratraw[iR054]*ys[iD]*ys[iHM]+ratraw[iR055]*ys[iH]*ys[iDM]+ratraw[iR056]*ys[iD]*ys[iDM]-ratraw[iR057]*ys[iHD]*ys[ie]-ratraw[iR058]*ys[iHD]*ys[ie]-ratraw[iR059]*ys[iD2]*ys[ie]  +ratraw[iR060]*ys[iHP]*ys[iDM]+ratraw[iR061]*ys[iDP]*ys[iHM]  +ratraw[iR062]*ys[iDP]*ys[iDM]-ratraw[iR063]*ys[iDM]*ys[ie]  +ratraw[iR063]*ys[iDM]*ys[ie]+ratraw[iR063]*ys[iDM]*ys[ie]  +ratraw[iR064]*ys[iDM]*ys[iH]+ratraw[iR065]*ys[iDM]*ys[iHE]-ratraw[iR111]*ys[iHD]*ys[ie]+ratraw[iR111]*ys[iHD]*ys[ie]  -ratraw[iR115]*ys[iD2]*ys[ie]+ratraw[iR115]*ys[iD2]*ys[ie]  +ratraw[iR116]*ys[iHM]+ratraw[iR117]*ys[iDM];

    //cout << "dydt" << endl;
    //for(i=0;i<NSPECIES;i++)  cout << dydt[i] << endl;
    //cout << "dydt end" <<endl;
    
    
};


const void eos_getabarB(double& a,double* w,double* aion,int n)
{
    double val=0.0;
    
    for(int i=0;i<n;i++)
    {
        val = val + w[i]/aion[i];
    }
    
    a = val;
};


const void Chem_EOSB(int mode, double* eosIn, double* x, double* aion,double* gam, int nSpec)
{
    double gasconst = 8.314472e7; // [erg/Kelvin]
    
    double den,temp,ei,pres;
    den=eosIn[0];
    temp=eosIn[1];
    ei=eosIn[2];
    pres=eosIn[3];
    
    double gamma1j[nSpec];
    for(int i=0;i<nSpec;i++)
    {
        gamma1j[i] = 1.0 / (gam[i]-1.0);
        //cout << "gam: " << gam[i] << " invgam: " << gamma1j[i] << endl;
    }
    
    
    double weight[nSpec];
    for(int i=0;i<nSpec;i++)
    {
        weight[i] = x[i]*gamma1j[i];
    }
    
    double abar=0.0;
    double abarinv=0.0;
    eos_getabarB(abarinv,x,aion,nSpec);
    abar = 1.0/abarinv;
    
    double rt;
    eos_getabarB(rt,weight,aion,nSpec);
    
    double gc = 1.0 + 1.0/(rt*abar);
    //eosIn[5] = gc; 
    
   //ARS - Use gamma from Orion calculation
   gc = eosIn[5];

    if(mode==1) // determines ei and presure from rho and T
    {
        eosIn[0]=den;
        eosIn[1]=temp;
        eosIn[2]=gasconst*temp/abar/(gc-1.0);
        eosIn[3]=gasconst*den*temp/abar;
    }
    else if(mode==2) //determines T and P from rho and ei
    {
        eosIn[0]=den;
        eosIn[1]=ei*(gc-1.0)*abar/gasconst;
        eosIn[2]=ei;
        eosIn[3]=den*ei*(gc-1.0);
    }
    else if(mode==3) // determines T and ei from rho and P
    {
        eosIn[0]=den;
        eosIn[2]=pres/den/(gc-1.0);
        eosIn[1]=eosIn[2]*(gc-1.0)*abar/gasconst;
        eosIn[3]=pres;
    }
    else // doesn't change anything... not good.
    {
        
        
    }
};

void chemEOS(REAL* ymass, REAL* eosIn, REAL* aion, REAL* gam, int Do_cool)
{
    int i;
    
    double Xe[NSPECIES];
    for(i=0;i<NSPECIES;i++) Xe[i] = ymass[i]*aion[i] / 1.3158;
   
    //for(i=0;i<NSPECIES;i++) 
    //  printf("chemEOS1 i = %d, ymass = %lg aion = %lg gam = %lg, Xe = %lg\n", i, ymass[i], aion[i], gam[i], Xe[i]);

    //if(Do_cool) printf("Do_cool was set!\n"); 
    if(Do_cool) Chem_EOSB(2,eosIn,Xe,aion,gam,NSPECIES); // use rho,e (e just got updated)
    else Chem_EOSB(1,eosIn,Xe,aion,gam,NSPECIES); // use rho,T
    
    //for(i=0;i<NSPECIES;i++) 
    //  printf("chemEOS1 i = %d, ymass = %lg aion = %lg gam = %lg, Xe = %lg\n", i, ymass[i], aion[i], gam[i], Xe[i]);


};


void compute_h2_opacity(double temp, double N_H2_eff, double &H2_opacity_correction);

REAL Cool_molecule(REAL temp_in, REAL rho_in,REAL* nin, REAL* ratraw, REAL dl, REAL divv, REAL *temptab, REAL *rate1)
{
    double PROTONMASS = 1.6726e-24;
    double kboltz = 1.3806e-16;
    
    // What is returned
    double cool_sum = 0.0;
    
    double tmp = temp_in;
    double rho = rho_in;
    
    double T3 = tmp/1000.0;
    double lt1 = pow(log10(T3),1);
    double lt2 = pow(log10(T3),2);
    double lt3 = pow(log10(T3),3);
    double lt4 = pow(log10(T3),4);
    double lt5 = pow(log10(T3),5);
    

    double c1=0.0;
    double c2=0.0;
    
    //cout << setprecision(15) << "n_H: " << nin[iH] << endl;
    //cout << setprecision(15) << "n_H2: " << nin[iH2] << endl;
    //cout << setprecision(15) << "n_He: " << nin[iHE] << endl;
    
    // Go over all cooling rates for molecules
    // H-H2
    double term=0.0;
    if(tmp < 10.0)  term = 0.0e0;
    else if(tmp >= 10.0 && tmp < 100.0)  {
        term = -16.818342 + 37.383713*lt1 + 58.145166*lt2 + 48.656103*lt3 + 20.159831*lt4 + 3.8479610*lt5;
        term = pow(10,(term));
    }
    else if(tmp >= 100.0 && tmp < 1000.0) {
        term = -24.311209 + 3.5692468*lt1 - 11.332860*lt2 - 27.850082*lt3 - 21.328264*lt4 - 4.2519023*lt5;
        term = pow(10,(term));
    }
    else if(tmp >= 1000.0 && tmp < 6000.0)  {
        term = -24.311209 + 4.6450521*lt1 - 3.7209846*lt2 + 5.9369081*lt3 - 5.5108047*lt4 + 1.5538288*lt5;
        term = pow(10,(term));
    }
    else
        term = 0.0e0;
    term = term*(nin[iH]*nin[iH2]/rho);
 
    //cout << "cool_sum start" << endl;

    cool_sum = cool_sum + term;

    //cout << setprecision(15) << "Cool_sum1: " << cool_sum << endl;
    //cout << setprecision(15) << "Cool H-H2: " << term << endl;
    
    // H2 & H2
    term = 0.0e0;
    if(tmp > 100.0 && tmp < 6000.0)  {
        term = -23.962112 + 2.09433740*lt1 - 0.77151436*lt2 + 0.43693353*lt3 - 0.14813216*lt4 - 0.033638326*lt5;
        term = pow(10,(term));
    }
    term = term*(nin[iH2]*nin[iH2]/rho);
    cool_sum = cool_sum + term;

    //cout << setprecision(15) << "Cool_sum2: " << cool_sum << endl;
    //cout << setprecision(15) << "Cool H2-H2: " << term << endl;
    
    // H2 & He
    term = 0.0e0;
    if(tmp > 100.0 && tmp < 6000.0)  {
        term = -23.689237 + 2.1892372*lt1 - 0.81520438*lt2 + 0.29036281*lt3  - 0.16596184*lt4 + 0.19191375*lt5;
        term = pow(10,(term));
    }
    term = term*(nin[iH2]*nin[iHE]/rho);
    cool_sum = cool_sum + term;

    //cout << setprecision(15) << "Cool_sum3: " << cool_sum << endl;
    //cout << setprecision(15) << "Cool H2-He: " << term << endl;
    
    // H2 & HP
    term = 0.0e0;
    if(tmp > 10.0 && tmp < 10000.0) {
        term = -21.716699 + 1.3865783*lt1 - 0.37915285*lt2 + 0.11453688*lt3 - 0.23214154*lt4 + 0.058538864*lt5;
        term = pow(10,(term)) ;
    }
    term = term*(nin[iH2]*nin[iHP]/rho);
    cool_sum = cool_sum + term;

    //cout << setprecision(15) << "Cool_sum4: " << cool_sum << endl;
    //cout << setprecision(15) << "Cool H2-HP: " << term << endl;
    
    // H2 & e
    term = 0.0e0;
    if(tmp > 10.0 && tmp < 200.0)  {
        term = -34.286155 - 48.537163*lt1 - 77.121176*lt2 - 51.352459*lt3 - 15.169160*lt4 - 0.98120322*lt5;
        term = pow(10,(term));
    }
    else if(tmp >= 200.0 && tmp < 10000.0)  {
        term = -22.190316 + 1.5728955*lt1 - 0.21335100*lt2 + 0.96149759*lt3 - 0.91023195*lt4 + 0.13749749*lt5;
        term = pow(10,(term));
    }
    term = term*(nin[iH2]*nin[iELEC]/rho);
    cool_sum = cool_sum + term;

    //cout << setprecision(15) << "Cool_sum5: " << cool_sum << endl;
    //cout << setprecision(15) << "Cool H2-e: " << term << endl;

////////////////////////////////////////////////////////////////////////////////////////////////////
    //ARS adding high denisty H2 LTE cooling correction
    int i, itemp;
    double yn, ynh, ynh2, ynhd, ynhp, ykdh, ykdh2, yncrh, yncrh2, h2_low_n, h2_high_n; 
    double abhd, abh2, abHI, abe, abhm, abh2p, ncrinv;
    double h2var0 = 0, h2var1=0, h2var2=0; 
    double ch1, ch2, ch3, ch4, ch5, ch6, ch22, ch25, cl1 = 0, cl67 = 0;
   
    double na = 6.02213e23; //Avo's number
    double narate = na*rho;
	    double eV = 1.60219e-12;
	 
    h2var0 = cool_sum * (rho/nin[iH2]);
    
    yn = 0;
    for(i=0;i<NSPECIES;i++)
      {
      yn = yn + nin[i];
      }

    ynh = nin[iH];
    ynhd = nin[iHD];
    ynh2 = nin[iH2];
    ynhp = nin[iHP];
   
    abh2 = ynh2/yn;
    abhd = ynhd/yn;
    abHI = nin[iH]/yn;
    abe =  nin[iELEC]/yn;
    abhm = nin[iHM]/yn;
    abh2p = nin[iH2P]/yn;

    double h2e20 = 508.95e0;
    double h2e31 = 852.5e0;
    double h2n2, h2n3, f;

    double tmin=1.e0, tmax=2.e8, dtlog, nmd, i_doub;
    nmd = NMD;    
    dtlog = log10(tmax) / ((double) nmd - 1.);
  
    if (tmp<= tmin)
        itemp = 0;
    else if (tmp > tmax)
        itemp = NMD-1;
    else
        itemp = (int) (log10(tmp) / dtlog);

  
    if (temptab[itemp] >= 1.e2 && temptab[itemp] <= 1.e4)
        cl1 = pow(10., rate1[itemp]);
    
    if (tmp < 5.e0)
        cl1 = 1.e-60;
    else if (tmp < 1.e2) {
        h2n2 = 0.25e0 * (5.e0 * exp(-h2e20 / tmp) /  (1.e0 + 5.e0 * exp(-h2e20 / tmp)));
        h2n3 = 0.75e0 * ((7.e0 / 3.e0) * exp(-h2e31 / tmp) / (1.e0 + (7.e0 / 3.e0) * exp(-h2e31 / tmp)));
        f    = 2.94e-11 * h2e20 * h2n2 * kboltz + 4.76e-10 * h2e31 * h2n3 * kboltz;
        cl1 = max(f, 1.e-60);
     }
    else if (tmp > 1.e4) {
        cl1 = pow(10,-18.253e0);
    }

    term = 0.0;
    if(fabs(h2var0) < 1.e-4 * cl1)
        term = h2var0 * nin[iH2];
    else
        term = nin[iH2] * cl1 / (1.e0 + cl1 / h2var0);
    
    
    // Ortho-para converstion heating/cooling
    cl67 = 9.e0 * exp(-170.5e0 / tmp);
    term = term +  4.76e-24 * ynhp * ynh2 * (cl67 * 0.25e0 - 0.75e0);

    if(term != term)
      printf("0 cool_sum = %lg, term = %lg, H = %lg, H2 = %lg\n", cool_sum, term, nin[iH], nin[iH2] );

//////////////////////////////////////////////////////////////////////////////////////////////////////
    
   
///////////////////////////////////////////////////////////////////////////////////
     //Optically thick H2 cooling - we assume that this is unimportant at
     //low gas densities (i.e. below n = 10^8 cm^-3). 

     double H2_opacity_correction; 
     double N_H2_eff, N_H2_jeans, N_H2_LVG, vth, Lj; //divv = velocity divergence, dl = cell length

     Lj = pow(3.14159 * (kboltz*tmp/2./PROTONMASS) / 6.67e-8 / (yn*PROTONMASS), 0.5); 

     dl = 2.e14; divv = 1.e6/dl;  //ARS -  need to fix this!

     if (yn < 1.e8) {
       H2_opacity_correction = 1.e0; }
     else {
       //Estimate #1 -- H2 column within local Jeans length  ARS: Here's where the H2 cooling is!
       vth = sqrt(kboltz * tmp / PROTONMASS);
       N_H2_jeans = ynh2 / (vth / dl);
       //N_H2_jeans = ynh2 * Lj;

       //Estimate #2 -- LVG estimate //ARS adding a correction here...?
       N_H2_LVG = ynh2 / fabs(divv);
       //N_H2_LVG = ynh2 / fabs(divv) * vth;

      //Take the smallest value -- our local Jeans length estimate ensures that
      //don't use an artifically large value in the case that divv is very small
       N_H2_eff = min(N_H2_LVG, N_H2_jeans);

       compute_h2_opacity(tmp, N_H2_eff, H2_opacity_correction);
       term = term * H2_opacity_correction;
       }

    //if(yn > 1.e10 && yn < 1.1e10)
      //printf("ynh2 = %lg, Lj, = %lg, N_H2_jeans = %lg, N_h2_eff = %lg, opac_corr = %lg\n", ynh2, Lj, N_H2_jeans, N_H2_eff, H2_opacity_correction);

    if(term != term)
      printf("1 cool_sum = %lg, term = %lg, H = %lg, H2 = %lg\n", cool_sum, term, nin[iH], nin[iH2] );
////////////////////////////////////////////////////////////////////////////////
 

    term = term/rho;

    cool_sum = term;  //cool_sum is overwritten here!
    //cout << setprecision(15) << "cl1: " << cl1 << "  h2var0: " << h2var0 << "  itemp: " << itemp << endl;
    //cout << setprecision(15) << "cool_sum: " << cool_sum << endl;

    // Lipovka, Nunez, Reese Cooling rate for HD and H
    term = 0.0e0;
    /*
    if(tmp > 30.0 && tmp < 20000.0)  {
        term = -42.45906 + 21.90083*log10(tmp) -10.1954*pow(log10(tmp),2) +2.19788*pow(log10(tmp),3) -0.17286*pow(log10(tmp),4);
        term = pow(10.0,(term))*nin[iHD]*nin[iH]/rho;}
     */    

     //ARS adding HD cooling updated for high densities
     double tlog, thd, r19scale, lnh, cl53, cl54, cl55, cl56, cl57;
 
     //ARS adding updated HD cooling
     
      tlog = log10(tmp);
      if (tmp > 2.e4) thd = log10(2.e4);
      else thd = tlog;

      cl53 = - 42.57688 + 21.93385*thd - 10.19097*pow(thd,2) + 2.19906*pow(thd,3) - 0.17334*pow(thd,4);
      cl54 = + 0.92433 + 0.77952*thd - 0.54263*pow(thd,2) + 0.11711*pow(thd,3) - 8.35e-3*pow(thd,4);
      cl55 = + 0.54962 - 1.06447*thd + 0.62343*pow(thd,2) - 0.13768*pow(thd,3) + 1.06e-2*pow(thd,4);
      cl56 = - 7.676e-2 + 0.11864e0*thd - 7.366e-2*pow(thd,2) + 1.759e-2*pow(thd,3) - 1.482e-3*pow(thd,4);
      cl57 = + 2.75e-3 - 3.66e-3*thd + 2.514e-3*pow(thd,2) - 6.6631e-4*pow(thd,3) + 6.1926e-5*pow(thd,4);


     if (abhd > 0e0) {
        r19scale = 1e0;
        if (yn > 1.e8) { 
          lnh = 8.e0; 
          }
        else if (ynh < 1.e0) {
          lnh = 0.e0;
          r19scale = ynh;
          }
        else { 
          lnh = log10(ynh); 
          }
        term = pow(10., cl53 + lnh * (cl54 + lnh * (cl55 + lnh * (cl56 + lnh * cl57)))) * ynhd;
        term = term * r19scale;
      }
   
    term = term/rho;

    cool_sum = cool_sum + term;
    //cout << setprecision(15) << "Cool_sum6: " << cool_sum << endl;
    //cout << setprecision(15) << "Cool HD-H: " << term << endl;
    if(term != term)
      printf("2 cool_sum = %lg, term = %lg, H = %lg, H2 = %lg\n", cool_sum, term, nin[iH], nin[iH2] );
   
    //ARS adding H2 CIE cooling
    double cie_opac, tau, tau_fac, cl58;

    term = 0.0;
    cl58 =  2.289e-49 * pow(tmp,4);
    cie_opac = 1.;
    if(ynh2 > 1.e10) {
      tau = pow((ynh2/7.e15),2.8);
      tau_fac = (1. - exp(-tau))/tau;
      cie_opac = min(1.,tau_fac);
      }

    term = cl58 * yn * (2.e0 * ynh2) * cie_opac;
    term = term/rho; 

    cool_sum = cool_sum + term;
    //cout << setprecision(15) << "Cool H2 CIE: " << term << endl;
    if(term != term)
      printf("3 cool_sum = %lg, term = %lg, H = %lg, H2 = %lg\n", cool_sum, term, nin[iH], nin[iH2] );

    //H2+ + e
    term = 0.0e0;
    if(tmp > 1.0 && tmp < 2000.0)
        term = 1.1e-19*pow(tmp,(-0.34))*exp(-3025.0/tmp);
    else
        term = 3.35e-21*pow(tmp,(0.12))*exp(-3025.0/tmp);
    c1 = term*nin[iELEC];
    
    //H2+ + H
    term = 0.0e0;
    if(tmp > 1.0 && tmp < 1000.0)  {
        term = 1.36e-22*exp(-3152.0/tmp);
        term = term*nin[iH];}
    else {
        term = -35.42 + 5.95*log10(tmp) - 0.526*pow(log10(tmp),2);
        term = pow(10,(term))*nin[iH];
    }
    
    c1 = c1 + term;
    
    // LTE H2
    term = 0.0e0;
    term = 2.0e-29*pow(tmp,(0.1))*exp(-3125.0/tmp);
    c2 = term;
    
    term = 0.0e0;
    term = c2/(1.0 + c2/c1);
    
    term = term * nin[iH];
    cool_sum = cool_sum + term;
    //cout << setprecision(15) << "Cool_sum7: " << cool_sum << endl;
    //cout << setprecision(15) << "LTE H2: " << term << endl;
    if(term != term)
      printf("5 cool_sum = %lg, term = %lg, H = %lg, H2 = %lg\n", cool_sum, term, nin[iH], nin[iH2] );

///////////////////////////////////////////////////////////////////////////////////
    //extra H2 formation and dissocaiton heating and cooling rates
    double f1, f2, alpha, t4log, temp_1eV;
    t4log = log10(tmp) - 4.e0;
    temp_1eV = eV / kboltz;

     if (tmp <= 3.e2) 
       ch1 = 1.1e-9 * pow(tmp,0.135e0) * exp(-5.2e4 / tmp);
     else
       ch1 = (3.7e-8 / pow(tmp,0.485e0)) * exp(-5.2e4 / tmp);

     if (tmp < 6.e4) {
       alpha = 1.e0 + 5.48e0 * temp_1eV / tmp;
       f1 = sqrt(tmp) * exp(-alpha);
       }
     else {
       alpha = 1.e0 + 5.48e0 * temp_1eV / 6e4;
       f1 = sqrt(6.e4) * exp(-alpha);
       }

      alpha = 1.e0 + 5.48e0 * temp_1eV / 4.5e3;
      f2 = sqrt(4.5e3) * exp(-alpha);

      h2_low_n  = 1.2e-16 * f1 / f2;
      h2_high_n = ch1;
/*
c Avoid division-by-zero. Note that this doesn't introduce any significant
c inaccuracy, since the test is only true when the dissociation rate is 
c tiny.
*/
    if (h2_high_n < 1.e-40)
      ch3 = 1.e-40;
    else
      ch3 = max(h2_low_n / h2_high_n, 1.e-40);

    ch2 = ch1 / 8.e0;

    h2_high_n = ch2;

    if (tmp < 3.e4)
       h2_low_n  = 5.996e-30 * pow(tmp,4.1881) * exp(-54657.4e0 / tmp) / pow((1.e0 + 6.761e-06 * tmp),5.6881);
    else
       h2_low_n  = 5.996e-30 * pow(3.e4,4.1881) * exp(-54657.4e0 / 3.e4) / pow((1.e0 + 6.761e-06 * 3.e4),5.6881);
      
    if (h2_high_n < 1.e-40)
       ch4 = 1.e-40;
    else
       ch4 = max(h2_low_n / h2_high_n, 1.e-40);
      
    if (tmp < 3.e4) {
      yncrh  = pow(1.e1,( 3.e0 - 0.416e0 * t4log  - 0.327e0 * t4log * t4log ));
      yncrh2 = pow(1.e1,( 4.845e0 - 1.3e0 * t4log + 1.62e0 * t4log * t4log ));
      }
     else {
      yncrh = pow(1.e1,(3.e0 - 0.416e0 * (log10(tmp) - 4.e0) - 0.327e0 * (log10(tmp) - 4.e0) * (log10(tmp) - 4.e0)));
      yncrh2 = pow(1.e1,( 4.845e0 - 1.3e0 * (log10(tmp) - 4.e0) + 1.62e0 * (log10(tmp) - 4.e0) * (log10(tmp) - 4.e0) ));
        }

    ch5 = 1.e0 / yncrh;
    ch6 = 1.e0 / yncrh2;
    ch22 = 0.65e-9; 
    ch25 = 4.4886e-9 * pow(tmp,0.109127e0) * exp(-1.01858e5 / tmp);

    ncrinv   = (2.e0 * abh2 * (ch6 - ch5) + ch5);
    h2var0   = 1.e0 / ( 1.e0 + yn * ncrinv);
    h2var1   = pow(ch3,h2var0);
    h2var2   = pow(ch4,h2var0);
    ykdh     = ch1 * h2var1;
    ykdh2    = ch2 * h2var2;

    //H2 collisional dissociation cooling
    term = 0.0e0;
    term = 4.48e0 * eV * (ykdh  * abHI * abh2 + ykdh2 * abh2 * abh2 + ch25  * abe  * abh2 ) * yn*yn;
    term = term/rho;
    cool_sum = cool_sum + term;

    if(term != term)
      {
      printf("6 cool_sum = %lg, term = %lg, H = %lg, H2 = %lg\n", cool_sum, term, nin[iH], nin[iH2] );
      printf("eV = %lg, ykdh = %lg, abHI = %lg, abh2 = %lg, ykdh2 = %lg, ch25 = %lg, abe = %lg\n", eV, ykdh, abHI, abh2, ykdh2, ch25, abe);
      }

    //H2 formation heating form H- and H2+
    term = 0.0;
    term = - 3.53e0 * eV * ch22 * abHI * abhm * yn*yn * (1.e0 - h2var0);
    term = term/rho;
    cool_sum = cool_sum + term;

    if(term != term)
      printf("7 cool_sum = %lg, term = %lg, H = %lg, H2 = %lg\n", cool_sum, term, nin[iH], nin[iH2] );

    term = 0.0;
    term  = - 1.83e0 * eV * 6.4e-10 * abHI * abh2p * yn*yn * (1.e0 - h2var0);
    term = term/rho;
    cool_sum = cool_sum + term;

    if(term != term)
      printf("8 cool_sum = %lg, term = %lg, H = %lg, H2 = %lg\n", cool_sum, term, nin[iH], nin[iH2] );

    //3-body H2 formation heating
    term = 0.0e0;
    term = - 4.48e0 * eV * ( ratraw[iR030] * nin[iH]*nin[iH]*nin[iH] 
                         + ratraw[iR031] * nin[iH]*nin[iH]*nin[iH2] 
                         + ratraw[iR032] * nin[iH]*nin[iH]*nin[iHE]);   

    term = term/narate/narate;
    term = term/rho;

    cool_sum = cool_sum + term;
    //cout << setprecision(15) << "H2 formation heating: " << term << endl;
/////////////////////////////////////////////////////////////////////////////////////

    double random, rfac = 1.e-7;
    random = rand();
    if(random < rfac*RAND_MAX || (yn > 1.5e12 && random < rfac*1.e3*RAND_MAX)) 
       {
       printf("cool_sum = %lg, term = %lg, H = %lg, H2 = %lg\n", cool_sum, term, nin[iH], nin[iH2] );
       printf("yn = %lg, ynh2 = %lg, vth = %lg, dl = %lg, N_H2_jeans = %lg, N_H2_LVG = %lg, H2_opac = %lg\n", yn, ynh2, vth, dl, N_H2_jeans, N_H2_LVG, H2_opacity_correction);
       }


    //cout << "cool_sum end = " << setprecision(15) << cool_sum << " " << tmp << endl;
    //if(cool_sum<0) cout << "ERROR: molecular cooling is negative!" << endl;
    // All done
    return cool_sum;
};


void Chemistry_photo(REAL* ymass, REAL* ratraw, REAL* photoc)
{
    int i;
    //double term;
    
    for(i=0;i<NSPECIES;i++) photoc[i]=0.0;
    
    // Electrons
    photoc[iELEC]=0.0;
    
    //H- first
    photoc[iHM] = ratraw[iR116]/ ( ratraw[iR116]  + ratraw[iR002]*ymass[iH]   + ratraw[iR005]*ymass[iHP]+ ratraw[iR014]*ymass[iELEC] + ratraw[iR015]*ymass[iH]   + ratraw[iR016]*ymass[iHP]+ ratraw[iR021]*ymass[iH2P]  + ratraw[iR022]*ymass[iH2P] + ratraw[iR028]*ymass[iHEP]+ ratraw[iR029]*ymass[iHE]   + ratraw[iR053]*ymass[iD]   + ratraw[iR054]*ymass[iD]+ ratraw[iR061]*ymass[iDP]   + ratraw[iR066]*ymass[iDP]  + ratraw[iR071]*ymass[iHDP]+ ratraw[iR072]*ymass[iHDP]  + ratraw[iR075]*ymass[iD2P] + ratraw[iR076]*ymass[iD2P] );
    
    //D- next
    photoc[iDM] = ratraw[iR117]/ ( ratraw[iR117]          + ratraw[iR052]*ymass[iH]   + ratraw[iR055]*ymass[iH]+ ratraw[iR056]*ymass[iD]    + ratraw[iR060]*ymass[iHP]  + ratraw[iR062]*ymass[iDP]   + ratraw[iR063]*ymass[iELEC] + ratraw[iR064]*ymass[iH]	+ ratraw[iR065]*ymass[iHE]    + ratraw[iR067]*ymass[iHP]   + ratraw[iR068]*ymass[iDP]  + ratraw[iR069]*ymass[iH2P]  + ratraw[iR070]*ymass[iH2P]  + ratraw[iR073]*ymass[iHDP] + ratraw[iR074]*ymass[iHDP]  + ratraw[iR077]*ymass[iD2P]  + ratraw[iR078]*ymass[iD2P] + ratraw[iR079]*ymass[iHEP] );
                         
     //H2+ next
     photoc[iH2P] = ratraw[iR118]  / ( ratraw[iR118]          + ratraw[iR004]*ymass[iH]   + ratraw[iR006]*ymass[iELEC]+ ratraw[iR021]*ymass[iHM]   + ratraw[iR022]*ymass[iHM]  + ratraw[iR048]*ymass[iD]     + ratraw[iR069]*ymass[iDM]   + ratraw[iR070]*ymass[iDM]  + ratraw[iR081]*ymass[iD]+ ratraw[iR082]*ymass[iD] );
    
    //HD+ next
    photoc[iHDP] = (ratraw[iR119]+ratraw[iR120])/ ( ratraw[iR119] + ratraw[iR120]+ ratraw[iR038]*ymass[iH]  + ratraw[iR044]*ymass[iELEC] + ratraw[iR049]*ymass[iD]   + ratraw[iR050]*ymass[iH]  + ratraw[iR071]*ymass[iHM]   + ratraw[iR072]*ymass[iHM]     + ratraw[iR073]*ymass[iDM] + ratraw[iR074]*ymass[iDM]   + ratraw[iR083]*ymass[iH]   + ratraw[iR084]*ymass[iD]     + ratraw[iR085]*ymass[iD]);
    
    //D2+ next
    photoc[iD2P] = ratraw[iR121]/ ( ratraw[iR121]+ ratraw[iR075]*ymass[iHM] + ratraw[iR076]*ymass[iHM] + ratraw[iR077]*ymass[iDM]  + ratraw[iR078]*ymass[iDM] + ratraw[iR086]*ymass[iD]  + ratraw[iR087]*ymass[iH]   + ratraw[iR088]*ymass[iH]  + ratraw[iR089]*ymass[iH]);
    
    
    //H2 next
    photoc[iH2] = ratraw[iR122]/ ( ratraw[iR122]+ ratraw[iR007]*ymass[iHP]  +
                                  ratraw[iR008]*ymass[iELEC] + ratraw[iR009]*ymass[iH]     +
                                  ratraw[iR010]*ymass[iH2]  + ratraw[iR011]*ymass[iHE]    +
                                  ratraw[iR023]*ymass[iELEC]  + ratraw[iR024]*ymass[iHEP] +
                                  ratraw[iR025]*ymass[iHEP]   + ratraw[iR031]*ymass[iH]*ymass[iH]  +
                                  ratraw[iR037]*ymass[iD]   + ratraw[iR039]*ymass[iDP]    +
                                  ratraw[iR090]*ymass[iDP]    + ratraw[iR091]*ymass[iDP]  +
                                  ratraw[iR109]*ymass[iHD]    + ratraw[iR113]*ymass[iD2] );
    
    //HD next
    photoc[iHD] = ratraw[iR123]/ ( ratraw[iR123]+ ratraw[iR040]*ymass[iH]    +
                                  ratraw[iR041]*ymass[iHP]    + ratraw[iR057]*ymass[iELEC]  +
                                  ratraw[iR058]*ymass[iELEC] + ratraw[iR092]*ymass[iHP]    +
                                  ratraw[iR093]*ymass[iHP]    + ratraw[iR094]*ymass[iDP]   +
                                  ratraw[iR095]*ymass[iDP]    + ratraw[iR096]*ymass[iDP]    +
                                  ratraw[iR101]*ymass[iHEP]  + ratraw[iR102]*ymass[iHEP]   +
                                  ratraw[iR103]*ymass[iHEP]   + ratraw[iR106]*ymass[iD]    +
                                  ratraw[iR108]*ymass[iH]     + ratraw[iR109]*ymass[iH2]    +
                                  ratraw[iR110]*ymass[iHE]   + ratraw[iR111]*ymass[iELEC] );
    
    //D2 Finally
    photoc[iD2] = ratraw[iR124] /
    ( ratraw[iR124] + ratraw[iR059]*ymass[iELEC] + ratraw[iR097]*ymass[iHP]
     + ratraw[iR098]*ymass[iHP]   + ratraw[iR099]*ymass[iHP]
     + ratraw[iR100]*ymass[iDP]    + ratraw[iR104]*ymass[iHEP]
     + ratraw[iR105]*ymass[iHEP]  + ratraw[iR107]*ymass[iH]
     + ratraw[iR112]*ymass[iH]    + ratraw[iR113]*ymass[iH2]
     + ratraw[iR114]*ymass[iHE]    + ratraw[iR115]*ymass[iELEC] );
    
    for(i=0;i<NSPECIES;i++)
    {
        if(photoc[i]>1.0) photoc[i] = 1.0;
        photoc[i] = 1.0 - photoc[i]; // Now due to collisions
        if(photoc[i]<1.0e-10) photoc[i] = 1.0e-10;
    }
    
    //cout << "photo" << endl;
    //for(i=0;i<NSPECIES;i++) cout << setprecision(15) << photoc[i] << endl;
    //cout << "photo end" << endl;
};


REAL LinInterp(double Temp, int index_max, REAL* table)
{
    //Linearly interpolates on cooling tables.
    //Assumes tables are equally spaced in log10(temperature)
    //And range is from 100 Kelvin to 1e9 Kelvin
    REAL val = 0.0;
    
    double idx_max = (double)index_max;
    double index_d = (idx_max/7.0)*( log10(Temp)-2.0 );
    int index_lower = (int) floor(index_d);
    
    if(index_lower > index_max)
    {
        val = table[index_max];
    }
    else if(index_lower < 0)
    {
        val = table[0];
    }
    else
    {
        double a = table[index_lower];
        double b = table[index_lower+1];
        val = a + (b-a)*( index_d - floor(index_d) );
    }
    
    // Old method, just take the floor value
    //val = table[index_lower];
    
    //val = index_d;
    return val;
};

void Cool_function(REAL* eosIn, REAL* ymass, REAL* aion, REAL* gamma, REAL* ratraw, REAL dl, REAL divv, REAL *temptab, REAL* rate1, int chem_cc_case, int Do_cool_metal, double dt)
{
    int i;
    
    REAL tradmax = 1.0e9;
    REAL tradmin = 1.0e1;
    REAL dradmax = 1.0e-10;
    REAL dradmin = 1.0e-30;
    
    double rho = eosIn[0];
    double Temp = eosIn[1];
    double ei = eosIn[2];
    double mfrac = eosIn[4];
    
    double naterm = 6.02214e23*rho ;  //N_A * dens
    
    double nin[NSPECIES], Xin[NSPECIES];
    for(i=0;i<NSPECIES;i++) nin[i] = ymass[i]*naterm;
    for(i=0;i<NSPECIES;i++) Xin[i] = ymass[i]*aion[i];
    
    double nh = nin[iHP]; //May need to add sources onto this if cooling is not right
    double ne = nin[iELEC];
    double nhh = nin[iH];
    double denh = nin[iHP] + nin[iH] + 2.0*(nin[iH2]);
    double dene = denh + 0.5*(nin[iHE] + nin[iHEP]);
    
    double dtHold = dt;
    
    double sdot = 0.0;
   
    double Tcmb = 2.726e0 * (1e0 + 20.0);
 
    if( (Temp < tradmax) && (Temp > tradmin) && (rho < dradmax) && (rho > dradmin) )
    {
        
        //Old indices for old tables
        double indexr = 353.*(log(Temp)/log(10.)-2.)/7. ;
        int index = floor(indexr);
        if(index >= 353) index = 353;
        else if(index < 0) index = 0;
        //cout << "T is " << Temp << " Index is " << hhe_casea[index] << " and " << hhe_casea[index+1] << " vs " << LinInterp(Temp,353,hhe_casea) << endl;
        
        /*
        //New indices for new tables
        double n_indexr = (log10(Temp)-2.0)/0.014;
        int n_index = floor(n_indexr);
        if(n_index > 500) n_index=500;
        else if(n_index < 1) n_index=0;
         */
        
        if(Temp > 6.0e3)
        {
            if(chem_cc_case==1) sdot = LinInterp(Temp,500,hhe_caseb);//LinInterp(Temp,352,hhe_caseb);//hhe_caseb[index];
            else sdot = LinInterp(Temp,500,hhe_casea);//LinInterp(Temp,352,hhe_casea);//hhe_casea[index];
            sdot = -sdot * (denh*dene)/rho;
        }
        else
        {
            if(Do_cool_metal) sdot = -mfrac*denh*dene/rho*LinInterp(Temp,500,metal_cool);//LinInterp(Temp,352,metal_cool);//metal_cool[index];
            sdot = sdot - Cool_molecule(Temp, rho, nin, ratraw, dl, divv, temptab, rate1); // cool_m should be > 0
            //sdot = sdot + Cool_molecule(Tcmb, rho, nin, ratraw, dl, divv, temptab, rate1);
        }
    }
    
    double dtmax = 0.1*ei/(fabs(sdot+1.0e-30));
    //cout << "TestLooping " << dtmax << " " << dtHold << endl;
    
    while(dtHold > 0) // Interates until dt is advanced
    {
        if(dtmax >= dtHold)
        {
            ei = ei + sdot*dtHold;
            eosIn[2] = ei; //e
            Chem_EOSB(2,eosIn,Xin,aion,gamma,NSPECIES);
            
            /* 
            rho = eosIn[0];
            Temp = eosIn[1];
            ei = eosIn[2];
            sdot = 0.0;
             */
            
            dtHold = 0;
        }
        else
        {
            //cout << "Looping cooling " << dtHold << endl;
            dtHold = dtHold - dtmax;
            
            eosIn[1] = 0.9*eosIn[1]; //T
            eosIn[2] = 0.9*eosIn[2]; //e
            Chem_EOSB(2,eosIn,Xin,aion,gamma,NSPECIES);
            
            rho = eosIn[0];
            Temp = eosIn[1];
            ei = eosIn[2];
            sdot = 0.0;
            
            if(Temp < tradmax && Temp > tradmin && rho < dradmax && rho > dradmin)
            {
                
                //Old indices for old tables
                double indexr = 353.*(log(Temp)/log(10.)-2.)/7.;
                int index = floor(indexr);
                if(index >= 353) index = 353;
                else if(index < 0) index = 0;
                
                /*
                //New indices for new tables
                double n_indexr = (log10(Temp)-2.0)/0.014;
                int n_index = floor(n_indexr);
                if(n_index > 500) n_index=500;
                else if(n_index < 1) n_index=0;
                 */
                
                if(Temp > 6.0e3)
                {
                    if(chem_cc_case==1) sdot = LinInterp(Temp,500,hhe_caseb);//LinInterp(Temp,352,hhe_caseb);//hhe_caseb[index];
                    else sdot = LinInterp(Temp,500,hhe_casea);//LinInterp(Temp,352,hhe_casea);//hhe_casea[index];
                    sdot = -sdot * (denh*dene)/rho;
                }
                else
                {
                    if(Do_cool_metal) sdot = -mfrac*denh*dene/rho*LinInterp(Temp,500,metal_cool);//LinInterp(Temp,352,metal_cool);//metal_cool[index];
                    sdot = sdot - Cool_molecule(Temp, rho, nin, ratraw, dl, divv, temptab, rate1); // cool_m should be > 0
                    //sdot = sdot +  Cool_molecule(Tcmb, rho, nin, ratraw, dl, divv, temptab, rate1);
                }
            }
            
            dtmax = fabs(0.1*ei/(fabs(sdot+1.0e-30)));
            
        } // end of dtmax >= dtHold if statement
        
    } // end of while
    
   
    // All done!
    // ei and Temp altered
    
                        
};




void compute_h2_opacity(double temp, double N_H2_eff, double &H2_opacity_correction)
{

      double column_min, column_max, logN, logT, diff, dN, dT;
      double opac_tmp[2], opac;
      int ii, jj;

      column_min = pow(10,(h2_opac_column[1-1]));
      column_max = pow(10,(h2_opac_column[nh2op-1]));

      if (N_H2_eff <= column_min){ 
        opac = 1e0;
        H2_opacity_correction = opac;
        return;
        }
      else if(N_H2_eff >= column_max){
        opac = 0e0;
        H2_opacity_correction = opac;
        return;
        }
      else {
        logN = log10(N_H2_eff);
        jj   = 1 + int(10 * (logN - 17.0)) -1;
        diff = h2_opac_column[jj+1] - h2_opac_column[jj];
        dN   = (logN - h2_opac_column[jj]) / diff;
      
        logT = log10(temp);
        if (logT <= h2_opac_temp[1-1]) {
          ii = 1 -1;
          dT = 0e0;
          }
        else if (logT >= h2_opac_temp[nh2op-1]) {
          ii = nh2op -1;
          dT = 0e0;
          }
        else {
          ii   = 1 + int((logT - 1.5) / 0.03) -1;
          diff = h2_opac_temp[ii+1] - h2_opac_temp[ii];
          dT   = (logT - h2_opac_temp[ii]) / diff;
         }

        if (dT > 0e0) {
          opac_tmp[0] = h2_opac[ii][jj] + dT * (h2_opac[ii+1][jj]
                     - h2_opac[ii][jj]);
          opac_tmp[1] = h2_opac[ii][jj+1] + dT * (h2_opac[ii+1][jj+1]
                     - h2_opac[ii][jj+1]);
         }
        else {
          opac_tmp[0] = h2_opac[ii][jj];
          opac_tmp[1] = h2_opac[ii][jj+1];
         }

        opac = opac_tmp[0] + dN * (opac_tmp[1] - opac_tmp[0]);
        opac = pow(1e1, opac);
        }

       H2_opacity_correction = opac;

      return;

};


